/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Libantargisgui_WRAP_H_
#define SWIG_Libantargisgui_WRAP_H_

class Swig::Director;


class SwigDirector_AGRubyObject : public AGRubyObject, public Swig::Director {

public:
    SwigDirector_AGRubyObject(VALUE self);
    virtual void clear();
    virtual ~SwigDirector_AGRubyObject();
};


class SwigDirector_AGEvent : public AGEvent, public Swig::Director {

public:
    SwigDirector_AGEvent(VALUE self, AGListener *pCaller, std::string const &pName, SDL_Event const *pEvent = 0);
    virtual ~SwigDirector_AGEvent();
};


class SwigDirector_AGListener : public AGListener, public Swig::Director {

public:
    SwigDirector_AGListener(VALUE self);
    virtual void clear();
    virtual ~SwigDirector_AGListener();
    virtual bool signal(AGEvent *m);
};


class SwigDirector_AGCPPListener : public AGCPPListener, public Swig::Director {

public:
    SwigDirector_AGCPPListener(VALUE self);
    virtual ~SwigDirector_AGCPPListener();
    virtual bool signal(AGEvent *m) const;
};


class SwigDirector_AGSignal : public AGSignal, public Swig::Director {

public:
    SwigDirector_AGSignal(VALUE self);
    SwigDirector_AGSignal(VALUE self, AGMessageObject *pCaller);
    SwigDirector_AGSignal(VALUE self, AGMessageObject *pCaller, std::string const &pName);
    virtual ~SwigDirector_AGSignal();
};


class SwigDirector_AGMessageObject : public AGMessageObject, public Swig::Director {

public:
    SwigDirector_AGMessageObject(VALUE self);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventActive(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool signal(AGEvent *m);
    virtual void clear();
    virtual ~SwigDirector_AGMessageObject();
    virtual Uint8 getButtonState() const;
    virtual AGPoint getMousePosition() const;
};


class SwigDirector_AGWidget : public AGWidget, public Swig::Director {

public:
    SwigDirector_AGWidget(VALUE self, AGWidget *pParent, AGRect const &r);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGWidget();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGColorButton : public AGColorButton, public Swig::Director {

public:
    SwigDirector_AGColorButton(VALUE self, AGWidget *pParent, AGRect const &r, int x, int y);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGColorButton();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGGLWidget : public AGGLWidget, public Swig::Director {

public:
    SwigDirector_AGGLWidget(VALUE self, AGWidget *pParent, AGRect const &r);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGGLWidget();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawGL();
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void drawAll(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_Parser : public Parser, public Swig::Director {

public:
    SwigDirector_Parser(VALUE self);
    virtual void simpleTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual ~SwigDirector_Parser();
    virtual void startTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual void endTag(std::string const &pName);
    virtual void text(std::string const &pText);
    virtual void comment(std::string const &pText);
    virtual void header(std::string const &pText);
};


class SwigDirector_DomParser : public DomParser, public Swig::Director {

public:
    SwigDirector_DomParser(VALUE self);
    virtual void simpleTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual ~SwigDirector_DomParser();
    virtual void startTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual void endTag(std::string const &pName);
    virtual void text(std::string const &pText);
    virtual void comment(std::string const &pText);
    virtual void header(std::string const &pText);
};


class SwigDirector_AGLayout : public AGLayout, public Swig::Director {

public:
    SwigDirector_AGLayout(VALUE self, AGWidget *pgParent, std::string const &pXMLData);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGLayout();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGDialog : public AGDialog, public Swig::Director {

public:
    SwigDirector_AGDialog(VALUE self, AGWidget *pgParent, std::string const &pXMLData);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGDialog();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventOk(AGEvent *event);
    virtual bool eventCancel(AGEvent *event);
    virtual bool eventClose(AGEvent *event);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGApplication : public AGApplication, public Swig::Director {

public:
    SwigDirector_AGApplication(VALUE self);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventActive(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool signal(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m2);
    virtual void mark();
    virtual void clear();
    virtual bool eventFrame(float pTime);
    virtual bool eventFrameEnd(float pTime);
    virtual void eventChangedRes();
    virtual ~SwigDirector_AGApplication();
    virtual bool eventIdle();
    virtual void tryQuit();
    virtual Uint8 getButtonState() const;
    virtual AGPoint getMousePosition() const;
    virtual void draw();
    virtual void prepareDraw();
};


class SwigDirector_AGButton : public AGButton, public Swig::Director {

public:
    SwigDirector_AGButton(VALUE self, AGWidget *pParent, AGRect const &r, std::string const &pText, int id = -1);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual void setChecked(bool pChecked);
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGButton();
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual void clear();
    virtual bool eventMouseEnter();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGText : public AGText, public Swig::Director {

public:
    SwigDirector_AGText(VALUE self, AGWidget *pParent, AGRect const &pRect, std::string const &pText, AGFont const &pFont);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGText();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGCaption : public AGCaption, public Swig::Director {

public:
    SwigDirector_AGCaption(VALUE self, AGWidget *pParent, AGRect const &pRect, std::string const &pText, AGFont const &pFont, AGBackground const &pBG);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGCaption();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGCheckBox : public AGCheckBox, public Swig::Director {

public:
    SwigDirector_AGCheckBox(VALUE self, AGWidget *pParent, AGRect pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual void setChecked(bool pChecked);
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGCheckBox();
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual void clear();
    virtual bool eventMouseEnter();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGEditLine : public AGEditLine, public Swig::Director {

public:
    SwigDirector_AGEditLine(VALUE self, std::string const &pText, AGFont pFont, bool pHardEnd);
    virtual ~SwigDirector_AGEditLine();
    virtual void draw(AGPainter &p, AGPoint const &pPoint, AGRect const &pClip);
    virtual void drawCursor(AGPainter &p, int cx, AGPoint const &pPoint, AGRect const &pClip, AGColor const &c);
};


class SwigDirector_AGEdit : public AGEdit, public Swig::Director {

public:
    SwigDirector_AGEdit(VALUE self, AGWidget *pParent, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGEdit();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void drawBackground(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGPaintTarget : public AGPaintTarget, public Swig::Director {

public:
    SwigDirector_AGPaintTarget(VALUE self);
    virtual AGRect getRect() const;
    virtual ~SwigDirector_AGPaintTarget();
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual void blitTri(AGTexture const &pSource, AGTriangle2 const &pSrc, AGTriangle2 const &pDest);
    virtual void fillRect(AGRect const &pr, AGColor const &c);
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual AGColor getPixel(int x, int y) const;
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void beginPaint();
    virtual void endPaint();
};


class SwigDirector_AGTexture : public AGTexture, public Swig::Director {

public:
    SwigDirector_AGTexture(VALUE self);
    SwigDirector_AGTexture(VALUE self, AGSurface const &pSurface, bool p3d = false);
    SwigDirector_AGTexture(VALUE self, AGTexture const &t);
    SwigDirector_AGTexture(VALUE self, int W, int H);
    virtual void endPaint();
    virtual void beginPaint();
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual void drawGradientAlpha(AGRect const &rect, AGColor const &ul, AGColor const &ur, AGColor const &dl, AGColor const &dr);
    virtual ~SwigDirector_AGTexture();
    virtual AGColor getPixel(int x, int y) const;
    virtual AGRect getRect() const;
    virtual void drawGradient(AGRect const &rect, AGColor const &ul, AGColor const &ur, AGColor const &dl, AGColor const &dr);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void fillRect(AGRect const &pRect, AGColor const &c);
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual void blitTri(AGTexture const &pSource, AGTriangle2 const &pSrc, AGTriangle2 const &pDest);
};


class SwigDirector_AGSurface : public AGSurface, public Swig::Director {

public:
    SwigDirector_AGSurface(VALUE self);
    SwigDirector_AGSurface(VALUE self, int w, int h);
    SwigDirector_AGSurface(VALUE self, AGSurface const &p);
    virtual AGRect getRect() const;
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual ~SwigDirector_AGSurface();
    virtual void blitTri(AGTexture const &pSource, AGTriangle2 const &pSrc, AGTriangle2 const &pDest);
    virtual void fillRect(AGRect const &pr, AGColor const &c);
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual AGColor getPixel(int x, int y) const;
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void beginPaint();
    virtual void endPaint();
};


class SwigDirector_AGImage : public AGImage, public Swig::Director {

public:
    SwigDirector_AGImage(VALUE self, AGWidget *pParent, AGRect const &r, AGSurface pSurface, bool pTile, AGRect const &pRect = AGRect(0,0,0,0));
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGImage();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGLayoutCreator : public AGLayoutCreator, public Swig::Director {

public:
    SwigDirector_AGLayoutCreator(VALUE self, std::string const &pName);
    virtual ~SwigDirector_AGLayoutCreator();
    virtual AGWidget *create(AGWidget *pParent, AGRect const &pRect, xmlpp::Node const &pNode);
};


class SwigDirector_AGVTiler : public AGVTiler, public Swig::Director {

public:
    SwigDirector_AGVTiler(VALUE self, AGWidget *pParent, AGRect const &pRect, bool pAdaptMyHeight = true);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void rePosition();
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGVTiler();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
    virtual void mark();
};


class SwigDirector_AGHTiler : public AGHTiler, public Swig::Director {

public:
    SwigDirector_AGHTiler(VALUE self, AGWidget *pParent, AGRect const &pRect, bool pAdaptMyHeight = true);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void rePosition();
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGHTiler();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
    virtual void mark();
};


class SwigDirector_AGListBox : public AGListBox, public Swig::Director {

public:
    SwigDirector_AGListBox(VALUE self, AGWidget *pParent, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGListBox();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGMenu : public AGMenu, public Swig::Director {

public:
    SwigDirector_AGMenu(VALUE self, AGWidget *pParent, AGPoint pWishPos, std::string const &pName);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void rePosition();
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGMenu();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
    virtual void mark();
};


class SwigDirector_AGMenuItem : public AGMenuItem, public Swig::Director {

public:
    SwigDirector_AGMenuItem(VALUE self, AGWidget *pParent, std::string const &pText);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void rePosition();
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGMenuItem();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual void clear();
    virtual bool eventMouseEnter();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void eventSelect();
    virtual void eventUnselect();
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
    virtual void mark();
};


class SwigDirector_AGSubMenu : public AGSubMenu, public Swig::Director {

public:
    SwigDirector_AGSubMenu(VALUE self, AGWidget *pParent, std::string const &ptext);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void rePosition();
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGSubMenu();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual void clear();
    virtual bool eventMouseEnter();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void eventSelect();
    virtual void eventUnselect();
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
    virtual void mark();
};


class SwigDirector_AGSound : public AGSound, public Swig::Director {

public:
    SwigDirector_AGSound(VALUE self);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGSound();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGRadioGroup : public AGRadioGroup, public Swig::Director {

public:
    SwigDirector_AGRadioGroup(VALUE self, AGWidget *pParent, AGRect const &pr);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual void eventChange(std::string const &p);
    virtual ~SwigDirector_AGRadioGroup();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGRadio : public AGRadio, public Swig::Director {

public:
    SwigDirector_AGRadio(VALUE self, AGWidget *pParent, AGRect pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual void setChecked(bool pChecked);
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGRadio();
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual void clear();
    virtual bool eventMouseEnter();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGScreen : public AGScreen, public Swig::Director {

public:
    SwigDirector_AGScreen(VALUE self);
    virtual void endPaint();
    virtual void beginPaint();
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual ~SwigDirector_AGScreen();
    virtual AGColor getPixel(int x, int y) const;
    virtual AGRect getRect() const;
    virtual size_t getWidth() const;
    virtual size_t getHeight() const;
    virtual void begin();
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void flip();
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual void fillRect(AGRect const &pr, AGColor const &c);
    virtual void blitTri(AGTexture const &pSource, AGTriangle2 const &pSrc, AGTriangle2 const &pDest);
};


class SwigDirector_AGTable : public AGTable, public Swig::Director {

public:
    SwigDirector_AGTable(VALUE self, AGWidget *pWidget, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual void setWidth(float w);
    virtual void setHeight(float w);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGTable();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGTheme : public AGTheme, public Swig::Director {

public:
    SwigDirector_AGTheme(VALUE self);
    virtual ~SwigDirector_AGTheme();
};


class SwigDirector_AGWindow : public AGWindow, public Swig::Director {

public:
    SwigDirector_AGWindow(VALUE self, AGWidget *pWidget, AGRect const &pRect, std::string const &pTitle = "", std::string const &pTheme = "");
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setWidth(float w);
    virtual void setHeight(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual AGRect getClientRect() const;
    virtual ~SwigDirector_AGWindow();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGFrame : public AGFrame, public Swig::Director {

public:
    SwigDirector_AGFrame(VALUE self, AGWidget *pParent, AGRect const &pRect, size_t width);
    SwigDirector_AGFrame(VALUE self, AGWidget *pParent, AGRect const &pRect, AGBorder const &pBorder);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual AGRect getClientRect() const;
    virtual ~SwigDirector_AGFrame();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGScreenWidget : public AGScreenWidget, public Swig::Director {

public:
    SwigDirector_AGScreenWidget(VALUE self);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual void useTextures();
    virtual bool eventShow();
    virtual void setLeft(float x);
    virtual void setTop(float y);
    virtual void setHeight(float w);
    virtual void setWidth(float w);
    virtual bool eventDragBy(AGEvent *event, AGPoint const &pDiff);
    virtual float minHeight() const;
    virtual float minWidth() const;
    virtual bool canFocus() const;
    virtual AGRect getClientRect() const;
    virtual AGPoint getMousePosition() const;
    virtual Uint8 getButtonState() const;
    virtual bool redraw() const;
    virtual ~SwigDirector_AGScreenWidget();
    virtual bool eventMouseButtonUp(AGEvent *m);
    virtual bool eventMouseButtonDown(AGEvent *m);
    virtual bool eventMouseClick(AGEvent *m);
    virtual bool eventMouseMotion(AGEvent *m);
    virtual bool signal(AGEvent *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent *m);
    virtual bool eventKeyDown(AGEvent *m);
    virtual bool eventKeyUp(AGEvent *m);
    virtual bool eventQuit(AGEvent *m);
    virtual bool eventQuitModal(AGEvent *m);
    virtual bool eventSysWM(AGEvent *m);
    virtual bool eventResize(AGEvent *m);
    virtual bool eventMouseEnter();
    virtual void clear();
    virtual void drawAll(AGPainter &p);
    virtual void drawAfter(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChild(AGWidget *w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void mark();
};


class SwigDirector_AGShaderProgram : public AGShaderProgram, public Swig::Director {

public:
    SwigDirector_AGShaderProgram(VALUE self, std::string const &pVertexFile, std::string const &pFragFile);
    virtual void doUpdate(float time);
    virtual ~SwigDirector_AGShaderProgram();
    virtual void enable();
    virtual void disable();
};


#endif

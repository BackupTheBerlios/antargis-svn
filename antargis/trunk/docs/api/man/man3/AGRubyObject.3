.TH "AGRubyObject" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AGRubyObject \- 
.SH SYNOPSIS
.br
.PP
\fC#include <ag_rubyobj.h>\fP
.PP
Inherited by \fBAGListener\fP, \fBAGMain\fP, \fBAGPaintTarget\fP, \fBAGPlugin\fP, \fBAnimMeshData\fP, \fBAntEntity\fP, \fBMeshData\fP, \fBPathfinder\fP, \fBPathWeighter\fP, \fBScene\fP, \fBSceneNode\fP, and \fBSimpleGraph\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef unsigned long \fBVALUE\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAGRubyObject\fP ()"
.br
.ti -1c
.RI "virtual \fB~AGRubyObject\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBmRubyObject\fP"
.br
.ti -1c
.RI "\fBVALUE\fP \fBmRUBY\fP"
.br
.ti -1c
.RI "bool \fBmDeleted\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBclear\fP ()"
.br
.ti -1c
.RI "virtual void \fBmark\fP ()"
.br
.RI "\fIoverride this function to mark your children \fP"
.ti -1c
.RI "void \fBmarkObject\fP (\fBAGRubyObject\fP *o)"
.br
.ti -1c
.RI "void \fBdisableGC\fP ()"
.br
.ti -1c
.RI "void \fBenableGC\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "void \fBgeneral_markfunc\fP (void *ptr)"
.br
.ti -1c
.RI "bool \fBsaveDelete\fP (\fBAGRubyObject\fP *o)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBAGRubyObject\fP does handling between ruby and c++ memory management. Ruby has a garbage collector (GC) which is not really to be influenced. Every object that is created in ruby is handled by the GC. So we have to take care of that.
.PP
Ruby's GC has no reference counting whatsoever but it uses a mark-and-sweep algorithm. When the GC is run the algorithm marks any known object and then calls all the objects' mark-functions which therefore call mark-functions all the objects it knowns. When anything known is marked, the algorithm kills any object that isn't marked.
.PP
So all we have to do is to mark any object that is connected to the current object in any way. Normally you would mark any object that is a children of the current one.
.PP
To make things easier \fBAGRubyObject\fP takes care of objects which are not handled by ruby. They get called recursively anyways. So all you have to do is overriding the \fBmark()\fP function and then calling \fBmarkObject(AGRubyObject *o)\fP for any object you want to mark.
.PP
If you need an explicit destructor-call at a specified time you must be content with a call to \fBclear()\fP, which you can override. For deletion of any \fBAGRubyObject\fP you should use saveDelete. This calls \fBclear()\fP and deletes the object, if it's not a ruby-managed one.
.PP
\fBSee also:\fP
.RS 4
\fBsaveDelete(AGRubyObject *o)\fP 
.RE
.PP

.PP
.SH "Member Typedef Documentation"
.PP 
.SS "typedef unsigned long \fBAGRubyObject::VALUE\fP"
.PP
This is copied from ruby.h, so that this header-file is not included all over the place. FIXME: this must eventually be changed - when the ruby implementation changes 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AGRubyObject::AGRubyObject ()"
.PP
.SS "AGRubyObject::~AGRubyObject ()\fC [virtual]\fP"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void AGRubyObject::clear ()\fC [protected, virtual]\fP"
.PP
Reimplemented in \fBAntEntity\fP, \fBAntMap\fP, \fBScene\fP, \fBSceneNode\fP, \fBAGComboBox\fP, \fBAGEdit\fP, and \fBAGWidget\fP.
.SS "void AGRubyObject::disableGC ()\fC [protected]\fP"
.PP
.SS "void AGRubyObject::enableGC ()\fC [protected]\fP"
.PP
.SS "void AGRubyObject::mark ()\fC [protected, virtual]\fP"
.PP
override this function to mark your children 
.PP
Reimplemented in \fBAnimMesh\fP, \fBGLApp\fP, \fBAntEntity\fP, \fBAntMap\fP, \fBMesh\fP, \fBPathfinder\fP, \fBScene\fP, \fBAGApplication\fP, \fBAGMain\fP, and \fBAGWidget\fP.
.SS "void AGRubyObject::markObject (\fBAGRubyObject\fP * o)\fC [protected]\fP"
.PP
.SH "Friends And Related Function Documentation"
.PP 
.SS "void general_markfunc (void * ptr)\fC [friend]\fP"
.PP
this is the marking function, that gets called by ruby it handles all the AGRubyObjects 
.SS "bool saveDelete (\fBAGRubyObject\fP * o)\fC [friend]\fP"
.PP
saveDelete is used to delete AGRubyObjects savely.
.PP
ruby does a gc-run and then deletes everything, which is not marked so eventually sub-instances of a rubyobject are killed before a workaround for this: 1) put all deleted objects in a set 2) check set before clearing/deleting 3) clear this set when marking 
.SH "Member Data Documentation"
.PP 
.SS "bool \fBAGRubyObject::mDeleted\fP"
.PP
.SS "\fBVALUE\fP \fBAGRubyObject::mRUBY\fP"
.PP
.SS "bool \fBAGRubyObject::mRubyObject\fP"
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Antargis from the source code.

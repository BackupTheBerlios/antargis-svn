.TH "AGApplication" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AGApplication \- Base class for application - holds the main loop
.PP
Use \fBAGApplication\fP as base class your application's class. In this library it's assumed that you have different parts of your program, that are really different. Each of these parts has its own \fBAGApplication\fP. The actual control of these applications is done through a main-loop, that queries new events from libSDL and gives them to the correct widgets. This main-loop can by started by \fBrun()\fP. After this your have some possibilities to access control. FOr instance there are the different event* functions, which you can override in an AGApplication's subclass.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <ag_application.h>\fP
.PP
Inherits \fBAGMessageObject\fP.
.PP
Inherited by \fBGLApp\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAGApplication\fP ()"
.br
.ti -1c
.RI "virtual \fB~AGApplication\fP ()"
.br
.ti -1c
.RI "bool \fBrun\fP ()"
.br
.RI "\fIthe main-loop of each application \fP"
.ti -1c
.RI "virtual bool \fBeventIdle\fP ()"
.br
.RI "\fIcalled in each frame when idling \fP"
.ti -1c
.RI "virtual bool \fBeventFrame\fP (float pTime)"
.br
.RI "\fIcalled between event-handling and drawing \fP"
.ti -1c
.RI "virtual bool \fBeventFrameEnd\fP (float pTime)"
.br
.RI "\fIcalled after drawing - so before event handling \fP"
.ti -1c
.RI "virtual bool \fBeventQuit\fP (\fBAGEvent\fP *m)"
.br
.ti -1c
.RI "virtual bool \fBeventKeyDown\fP (\fBAGEvent\fP *m2)"
.br
.ti -1c
.RI "virtual bool \fBeventMouseMotion\fP (\fBAGEvent\fP *m)"
.br
.ti -1c
.RI "virtual void \fBeventChangedRes\fP ()"
.br
.ti -1c
.RI "void \fBsetMainWidget\fP (\fBAGWidget\fP *w)"
.br
.ti -1c
.RI "\fBAGWidget\fP * \fBgetMainWidget\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw\fP ()"
.br
.RI "\fIcalls the draw-function of the main-widget \fP"
.ti -1c
.RI "virtual void \fBprepareDraw\fP ()"
.br
.RI "\fIprepares the actual drawing process \fP"
.ti -1c
.RI "void \fBredraw\fP ()"
.br
.RI "\fIquery redraw \fP"
.ti -1c
.RI "virtual void \fBtryQuit\fP ()"
.br
.RI "\fIquit the application \fP"
.ti -1c
.RI "long \fBgetTicks\fP () const "
.br
.ti -1c
.RI "void \fBdelay\fP (int ms)"
.br
.RI "\fIdelays execution for ms milliseconds. This can be used to decrease framerate and cpu-load. \fP"
.ti -1c
.RI "void \fBsetTooltip\fP (\fBAGTooltip\fP *pTooltip)"
.br
.RI "\fIthis function sets the current tooltip, which is display above all widgets \fP"
.ti -1c
.RI "void \fBresetTooltip\fP (\fBAGTooltip\fP *pTooltip)"
.br
.ti -1c
.RI "void \fBsetOverlay\fP (\fBAGWidget\fP *pOverlay)"
.br
.ti -1c
.RI "\fBAGWidget\fP * \fBgetOverlay\fP ()"
.br
.ti -1c
.RI "void \fBsetCursor\fP (const \fBAGTexture\fP &pTexture)"
.br
.RI "\fIthis function disables hardware cursor and shows software-cursor instead \fP"
.ti -1c
.RI "void \fBsetNormalCursor\fP ()"
.br
.RI "\fIthis function enables hardware-cursor \fP"
.ti -1c
.RI "virtual SDL_Event * \fBgetNewEvent\fP ()"
.br
.ti -1c
.RI "void \fBsetKeyRepeat\fP (bool enable)"
.br
.ti -1c
.RI "void \fBmark\fP ()"
.br
.RI "\fImark my mainWidget and my tooltip, as they can be ruby-objects \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for application - holds the main loop
.PP
Use \fBAGApplication\fP as base class your application's class. In this library it's assumed that you have different parts of your program, that are really different. Each of these parts has its own \fBAGApplication\fP. The actual control of these applications is done through a main-loop, that queries new events from libSDL and gives them to the correct widgets. This main-loop can by started by \fBrun()\fP. After this your have some possibilities to access control. FOr instance there are the different event* functions, which you can override in an AGApplication's subclass. 

If you want to quit this application call \fBtryQuit()\fP.
.PP
Each \fBAGApplication\fP has a single main-widget, which is drawn in every frame. Set it by calling \fBsetMainWidget()\fP.
.PP
The typical usage looks like this: 
.PP
.nf

  class MyApp:public \fBAGApplication\fP
  {
    public:
    bool \fBeventFrame(float t)\fP
    {
      std::cout<<'In this frame '<<t<<' seconds have passed.'<<std::endl;
    }
  };
.fi
.PP
.PP
.PP
.nf
  int main()
  {
here you have to init the video mode
    \fBAGMain\fP main;
    main.initVideo(800,600,32,false,false);
.fi
.PP
.PP
.PP
.nf
the actual example
    MyApp app;
    app.run();
    return 0;
  }
  
.fi
.PP
 
.PP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AGApplication::AGApplication ()"
.PP
.SS "AGApplication::~AGApplication ()\fC [virtual]\fP"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void AGApplication::delay (int ms)"
.PP
delays execution for ms milliseconds. This can be used to decrease framerate and cpu-load. 
.PP
.SS "void AGApplication::draw ()\fC [virtual]\fP"
.PP
calls the draw-function of the main-widget 
.PP
\fBAGApplication::draw()\fP calls the draw-function of the mainWidget and cares about drawing a custom mouse-cursor, the tooltip and possible overlays. At the end the screen-buffer is flipped. 
.PP
Reimplemented in \fBGLApp\fP.
.SS "void AGApplication::eventChangedRes ()\fC [virtual]\fP"
.PP
.SS "bool AGApplication::eventFrame (float pTime)\fC [virtual]\fP"
.PP
called between event-handling and drawing 
.PP
Reimplemented in \fBGLApp\fP.
.SS "bool AGApplication::eventFrameEnd (float pTime)\fC [virtual]\fP"
.PP
called after drawing - so before event handling 
.PP
.SS "bool AGApplication::eventIdle ()\fC [virtual]\fP"
.PP
called in each frame when idling 
.PP
.SS "bool AGApplication::eventKeyDown (\fBAGEvent\fP * m2)\fC [virtual]\fP"
.PP
Reimplemented from \fBAGMessageObject\fP.
.PP
Reimplemented in \fBGLApp\fP.
.SS "bool AGApplication::eventMouseMotion (\fBAGEvent\fP * m)\fC [virtual]\fP"
.PP
Reimplemented from \fBAGMessageObject\fP.
.PP
Reimplemented in \fBGLApp\fP.
.SS "bool AGApplication::eventQuit (\fBAGEvent\fP * m)\fC [virtual]\fP"
.PP
Reimplemented from \fBAGMessageObject\fP.
.SS "\fBAGWidget\fP * AGApplication::getMainWidget ()"
.PP
.SS "SDL_Event * AGApplication::getNewEvent ()\fC [virtual]\fP"
.PP
.SS "\fBAGWidget\fP * AGApplication::getOverlay ()"
.PP
.SS "long AGApplication::getTicks () const"
.PP
.SS "void AGApplication::mark ()\fC [virtual]\fP"
.PP
mark my mainWidget and my tooltip, as they can be ruby-objects 
.PP
Reimplemented from \fBAGRubyObject\fP.
.PP
Reimplemented in \fBGLApp\fP.
.SS "void AGApplication::prepareDraw ()\fC [virtual]\fP"
.PP
prepares the actual drawing process 
.PP
prepareDraw runs prepareDraw for the main-widget, which itself runs prepareDraw recursively. This functions are meant to prepare possible texture contents and other things, that might be updated in each frame. 
.SS "void AGApplication::redraw ()"
.PP
query redraw 
.PP
Queries a complete screen redraw. This makes sense in SDL-mode only. There a dirty rectangle kind of painting is used. 
.SS "void AGApplication::resetTooltip (\fBAGTooltip\fP * pTooltip)"
.PP
this functions resets the tooltip pTooltip. 
.PP
\fBParameters:\fP
.RS 4
\fIpTooltip\fP a tooltip of a widget 
.RE
.PP

.SS "bool AGApplication::run ()"
.PP
the main-loop of each application 
.PP
Each program has one or more application-objects. An application normally represents a single UI-screen. So it has 
.SS "void AGApplication::setCursor (const \fBAGTexture\fP & pTexture)"
.PP
this function disables hardware cursor and shows software-cursor instead 
.PP
.SS "void AGApplication::setKeyRepeat (bool enable)"
.PP
.SS "void AGApplication::setMainWidget (\fBAGWidget\fP * w)"
.PP
.SS "void AGApplication::setNormalCursor ()"
.PP
this function enables hardware-cursor 
.PP
.SS "void AGApplication::setOverlay (\fBAGWidget\fP * pOverlay)"
.PP
.SS "void AGApplication::setTooltip (\fBAGTooltip\fP * pTooltip)"
.PP
this function sets the current tooltip, which is display above all widgets 
.PP
.SS "void AGApplication::tryQuit ()\fC [virtual]\fP"
.PP
quit the application 
.PP
This sets the private mRunning to false. One might add a function, that checks if quitting is ok or reset mRunning to true. But this is not yet part of \fBAGApplication\fP. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Antargis from the source code.

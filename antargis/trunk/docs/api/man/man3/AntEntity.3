.TH "AntEntity" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AntEntity \- 
.SH SYNOPSIS
.br
.PP
\fC#include <entity.h>\fP
.PP
Inherits \fBAGRubyObject\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::list< \fBSceneNode\fP * > \fBMeshes\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAntEntity\fP ()"
.br
.ti -1c
.RI "\fBAntEntity\fP (const \fBAGVector3\fP &p)"
.br
.ti -1c
.RI "\fBAntEntity\fP (const \fBAGVector2\fP &p)"
.br
.ti -1c
.RI "virtual \fB~AntEntity\fP ()"
.br
.ti -1c
.RI "void \fBsetMinimapColor\fP (const \fBAGColor\fP &c)"
.br
.ti -1c
.RI "void \fBsetMinimapSize\fP (float f)"
.br
.ti -1c
.RI "\fBAGColor\fP \fBgetMinimapColor\fP () const "
.br
.ti -1c
.RI "bool \fBshowOnMinimap\fP () const "
.br
.ti -1c
.RI "float \fBgetMinimapSize\fP () const "
.br
.ti -1c
.RI "void \fBsetStrength\fP (float f)"
.br
.ti -1c
.RI "float \fBgetStrength\fP () const "
.br
.ti -1c
.RI "void \fBsetMoraleStrength\fP (float f)"
.br
.ti -1c
.RI "float \fBgetMoraleStrength\fP () const "
.br
.ti -1c
.RI "void \fBsetDefense\fP (float f)"
.br
.ti -1c
.RI "float \fBgetDefense\fP () const "
.br
.ti -1c
.RI "void \fBsetMoraleFlag\fP (bool f)"
.br
.ti -1c
.RI "\fBAGVector3\fP \fBgetPos3D\fP () const "
.br
.ti -1c
.RI "\fBAGVector2\fP \fBgetPos2D\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetPos\fP (const \fBAGVector2\fP &p)"
.br
.ti -1c
.RI "void \fBsetPos\fP (const \fBAGVector3\fP &p)"
.br
.ti -1c
.RI "int \fBgetID\fP () const "
.br
.ti -1c
.RI "\fBAGString\fP \fBgetName\fP () const "
.br
.ti -1c
.RI "void \fBsetName\fP (const \fBAGString\fP &pName)"
.br
.ti -1c
.RI "void \fBsetProvide\fP (const \fBAGString\fP &pName, bool flag)"
.br
.ti -1c
.RI "bool \fBprovides\fP (const \fBAGString\fP &pName) const "
.br
.ti -1c
.RI "virtual \fBAGString\fP \fBxmlName\fP () const "
.br
.ti -1c
.RI "virtual void \fBsaveXML\fP (\fBNode\fP &node) const "
.br
.ti -1c
.RI "virtual void \fBloadXML\fP (const \fBNode\fP &node)"
.br
.ti -1c
.RI "virtual void \fBnewRestJob\fP (float pTime)"
.br
.ti -1c
.RI "virtual void \fBnewFetchJob\fP (int p, \fBAGVector2\fP &pTarget, const \fBAGString\fP &pWhat)"
.br
.ti -1c
.RI "virtual void \fBnewFetchJob\fP (int p, \fBAntEntity\fP *pTarget, const \fBAGString\fP &pWhat)"
.br
.ti -1c
.RI "virtual void \fBnewMoveJob\fP (int p, const \fBAGVector2\fP &pTarget, float pnear=0.0)"
.br
.ti -1c
.RI "virtual void \fBnewMoveJob\fP (int p, const \fBAGVector3\fP &pTarget, float pnear=0.0)"
.br
.ti -1c
.RI "virtual void \fBnewFightJob\fP (int p, \fBAntEntity\fP *target, float distance)"
.br
.ti -1c
.RI "virtual void \fBdelJob\fP ()"
.br
.ti -1c
.RI "bool \fBisMoving\fP () const "
.br
.ti -1c
.RI "virtual void \fBresourceChanged\fP ()"
.br
.ti -1c
.RI "bool \fBhasJob\fP () const "
.br
.ti -1c
.RI "\fBAGRect2\fP \fBgetRect\fP () const "
.br
.ti -1c
.RI "virtual void \fBeventNoJob\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventJobFinished\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventGotNewJob\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventGotFight\fP (\fBAntEntity\fP *pOther)"
.br
.ti -1c
.RI "void \fBsetSpeed\fP (float f)"
.br
.ti -1c
.RI "float \fBgetSpeed\fP () const "
.br
.ti -1c
.RI "float \fBgetHealSpeed\fP () const "
.br
.ti -1c
.RI "void \fBsetHealSpeed\fP (float f)"
.br
.ti -1c
.RI "void \fBsetMoraleHealSpeed\fP (float f)"
.br
.ti -1c
.RI "void \fBsetHunger\fP (float f)"
.br
.ti -1c
.RI "void \fBsetAggression\fP (float agg)"
.br
.ti -1c
.RI "float \fBgetAggression\fP () const "
.br
.ti -1c
.RI "virtual void \fBeventDie\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventDefeated\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventHaveDefeated\fP (\fBAntEntity\fP *e)"
.br
.ti -1c
.RI "virtual void \fBeventMoraleLow\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventStartFighting\fP ()"
.br
.ti -1c
.RI "virtual void \fBeventStartMoving\fP ()"
.br
.ti -1c
.RI "virtual bool \fBeventHitWaterMark\fP (bool fromAbove)"
.br
.ti -1c
.RI "void \fBsigDefeated\fP ()"
.br
.ti -1c
.RI "void \fBsigJobFinished\fP ()"
.br
.ti -1c
.RI "float \fBgetEnergy\fP () const "
.br
.ti -1c
.RI "float \fBgetMorale\fP () const "
.br
.ti -1c
.RI "bool \fBcanFight\fP () const "
.br
.ti -1c
.RI "bool \fBisFighting\fP () const "
.br
.ti -1c
.RI "void \fBsetMesh\fP (\fBSceneNode\fP *pMesh)"
.br
.ti -1c
.RI "\fBMeshes\fP \fBgetMesh\fP ()"
.br
.ti -1c
.RI "\fBSceneNode\fP * \fBgetFirstMesh\fP ()"
.br
.ti -1c
.RI "void \fBaddMesh\fP (\fBSceneNode\fP *pMesh, const \fBAGVector3\fP &v)"
.br
.ti -1c
.RI "void \fBsetDirection\fP (float pAngle)"
.br
.ti -1c
.RI "float \fBgetDirection\fP () const "
.br
.ti -1c
.RI "void \fBdecEnergy\fP (float amount)"
.br
.ti -1c
.RI "void \fBdecMorale\fP (float amount)"
.br
.ti -1c
.RI "void \fBincMorale\fP (float pTime)"
.br
.ti -1c
.RI "void \fBincExperience\fP (float amount)"
.br
.ti -1c
.RI "virtual void \fBexperienceFull\fP ()"
.br
.ti -1c
.RI "float \fBgetFood\fP () const "
.br
.ti -1c
.RI "void \fBincFood\fP (float v)"
.br
.ti -1c
.RI "bool \fBisStarving\fP () const "
.br
.ti -1c
.RI "bool \fBisOnWater\fP () const "
.br
.ti -1c
.RI "bool \fBisOnGround\fP () const "
.br
.ti -1c
.RI "void \fBsetOnWater\fP (bool p)"
.br
.ti -1c
.RI "void \fBsetOnGround\fP (bool p)"
.br
.ti -1c
.RI "void \fBeventMapChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBmove\fP (float pTime)"
.br
.ti -1c
.RI "void \fBmark\fP ()"
.br
.RI "\fIoverride this function to mark your children \fP"
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBclearMeshes\fP ()"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool v)"
.br
.ti -1c
.RI "virtual void \fBanimationEvent\fP (const \fBAGString\fP &pName)"
.br
.ti -1c
.RI "void \fBheal\fP (float pTime)"
.br
.ti -1c
.RI "\fBAntEntity\fP * \fBgetFightTarget\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBexperience\fP"
.br
.ti -1c
.RI "float \fBlearnAmount\fP"
.br
.ti -1c
.RI "float \fBmDir\fP"
.br
.ti -1c
.RI "\fBResource\fP \fBresource\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::list<\fBSceneNode\fP*> \fBAntEntity::Meshes\fP"
.PP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AntEntity::AntEntity ()"
.PP
.SS "AntEntity::AntEntity (const \fBAGVector3\fP & p)"
.PP
.SS "AntEntity::AntEntity (const \fBAGVector2\fP & p)"
.PP
.SS "AntEntity::~AntEntity ()\fC [virtual]\fP"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void AntEntity::addMesh (\fBSceneNode\fP * pMesh, const \fBAGVector3\fP & v)"
.PP
.SS "void AntEntity::animationEvent (const \fBAGString\fP & pName)\fC [virtual]\fP"
.PP
.SS "bool AntEntity::canFight () const"
.PP
.SS "void AntEntity::clear ()\fC [virtual]\fP"
.PP
Reimplemented from \fBAGRubyObject\fP.
.SS "void AntEntity::clearMeshes ()"
.PP
.SS "void AntEntity::decEnergy (float amount)"
.PP
.SS "void AntEntity::decMorale (float amount)"
.PP
.SS "void AntEntity::delJob ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventDefeated ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventDie ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventGotFight (\fBAntEntity\fP * pOther)\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventGotNewJob ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventHaveDefeated (\fBAntEntity\fP * e)\fC [virtual]\fP"
.PP
.SS "bool AntEntity::eventHitWaterMark (bool fromAbove)\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventJobFinished ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventMapChanged ()"
.PP
.SS "void AntEntity::eventMoraleLow ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventNoJob ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventStartFighting ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::eventStartMoving ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::experienceFull ()\fC [virtual]\fP"
.PP
.SS "float AntEntity::getAggression () const"
.PP
.SS "float AntEntity::getDefense () const"
.PP
.SS "float AntEntity::getDirection () const"
.PP
.SS "float AntEntity::getEnergy () const"
.PP
.SS "\fBAntEntity\fP * AntEntity::getFightTarget ()"
.PP
.SS "\fBSceneNode\fP * AntEntity::getFirstMesh ()"
.PP
.SS "float AntEntity::getFood () const"
.PP
.SS "float AntEntity::getHealSpeed () const"
.PP
.SS "int AntEntity::getID () const"
.PP
.SS "\fBAntEntity::Meshes\fP AntEntity::getMesh ()"
.PP
.SS "\fBAGColor\fP AntEntity::getMinimapColor () const"
.PP
.SS "float AntEntity::getMinimapSize () const"
.PP
.SS "float AntEntity::getMorale () const"
.PP
.SS "float AntEntity::getMoraleStrength () const"
.PP
.SS "\fBAGString\fP AntEntity::getName () const"
.PP
.SS "\fBAGVector2\fP AntEntity::getPos2D () const"
.PP
.SS "\fBAGVector3\fP AntEntity::getPos3D () const"
.PP
.SS "\fBAGRect2\fP AntEntity::getRect () const"
.PP
.SS "float AntEntity::getSpeed () const"
.PP
.SS "float AntEntity::getStrength () const"
.PP
.SS "bool AntEntity::hasJob () const"
.PP
.SS "void AntEntity::heal (float pTime)"
.PP
.SS "void AntEntity::incExperience (float amount)"
.PP
.SS "void AntEntity::incFood (float v)"
.PP
.SS "void AntEntity::incMorale (float pTime)"
.PP
.SS "bool AntEntity::isFighting () const"
.PP
.SS "bool AntEntity::isMoving () const"
.PP
.SS "bool AntEntity::isOnGround () const"
.PP
.SS "bool AntEntity::isOnWater () const"
.PP
.SS "bool AntEntity::isStarving () const"
.PP
.SS "void AntEntity::loadXML (const \fBNode\fP & node)\fC [virtual]\fP"
.PP
.SS "void AntEntity::mark ()\fC [virtual]\fP"
.PP
override this function to mark your children 
.PP
Reimplemented from \fBAGRubyObject\fP.
.SS "void AntEntity::move (float pTime)\fC [virtual]\fP"
.PP
do anything in given time frame 
.SS "void AntEntity::newFetchJob (int p, \fBAntEntity\fP * pTarget, const \fBAGString\fP & pWhat)\fC [virtual]\fP"
.PP
.SS "void AntEntity::newFetchJob (int p, \fBAGVector2\fP & pTarget, const \fBAGString\fP & pWhat)\fC [virtual]\fP"
.PP
.SS "void AntEntity::newFightJob (int p, \fBAntEntity\fP * target, float distance)\fC [virtual]\fP"
.PP
.SS "void AntEntity::newMoveJob (int p, const \fBAGVector3\fP & pTarget, float pnear = \fC0.0\fP)\fC [virtual]\fP"
.PP
.SS "void AntEntity::newMoveJob (int p, const \fBAGVector2\fP & pTarget, float pnear = \fC0.0\fP)\fC [virtual]\fP"
.PP
.SS "void AntEntity::newRestJob (float pTime)\fC [virtual]\fP"
.PP
.SS "bool AntEntity::provides (const \fBAGString\fP & pName) const"
.PP
.SS "void AntEntity::resourceChanged ()\fC [virtual]\fP"
.PP
.SS "void AntEntity::saveXML (\fBNode\fP & node) const\fC [virtual]\fP"
.PP
.SS "void AntEntity::setAggression (float agg)"
.PP
.SS "void AntEntity::setDefense (float f)"
.PP
.SS "void AntEntity::setDirection (float pAngle)"
.PP
.SS "void AntEntity::setHealSpeed (float f)"
.PP
.SS "void AntEntity::setHunger (float f)"
.PP
.SS "void AntEntity::setMesh (\fBSceneNode\fP * pMesh)"
.PP
.SS "void AntEntity::setMinimapColor (const \fBAGColor\fP & c)"
.PP
.SS "void AntEntity::setMinimapSize (float f)"
.PP
.SS "void AntEntity::setMoraleFlag (bool f)"
.PP
.SS "void AntEntity::setMoraleHealSpeed (float f)"
.PP
.SS "void AntEntity::setMoraleStrength (float f)"
.PP
.SS "void AntEntity::setName (const \fBAGString\fP & pName)"
.PP
.SS "void AntEntity::setOnGround (bool p)"
.PP
.SS "void AntEntity::setOnWater (bool p)"
.PP
.SS "void AntEntity::setPos (const \fBAGVector3\fP & p)"
.PP
.SS "void AntEntity::setPos (const \fBAGVector2\fP & p)\fC [virtual]\fP"
.PP
.SS "void AntEntity::setProvide (const \fBAGString\fP & pName, bool flag)"
.PP
.SS "void AntEntity::setSpeed (float f)"
.PP
.SS "void AntEntity::setStrength (float f)"
.PP
.SS "void AntEntity::setVisible (bool v)"
.PP
.SS "bool AntEntity::showOnMinimap () const"
.PP
.SS "void AntEntity::sigDefeated ()"
.PP
.SS "void AntEntity::sigJobFinished ()"
.PP
.SS "\fBAGString\fP AntEntity::xmlName () const\fC [virtual]\fP"
.PP
.SH "Member Data Documentation"
.PP 
.SS "float \fBAntEntity::experience\fP"
.PP
.SS "float \fBAntEntity::learnAmount\fP"
.PP
.SS "float \fBAntEntity::mDir\fP"
.PP
.SS "\fBResource\fP \fBAntEntity::resource\fP"
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Antargis from the source code.

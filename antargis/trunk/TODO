* while sitting around hero, men use much cpu time ;-)

* delete std::map's from view.h and use mSurface from AntEntity
	=> change usage of getTexture, so that it isn't called each frame









ok 1) Tiles selektieren
ok 2) Entites selektierbar machen
ok 3) HeroEntity
ok 4) HeroEntity move 
ok => 4a) Eigenschaften/Position nach IsoView übernehmen
ok 4) ManEntity, der HeroEntity folgt
ok 5) Figting
ok 6) Computer-Spieler
ok => 6a) Figuren einfärben
ok * Kämpfen - abwehren
ok * Healing
canceled * LOD-Map:
canceled * reduced SplineMap - quadratic patches ? (look at SystemRequirements)

ok * XML-InString loading
ok * SplineMap-saving/loading
ok * show Editing-point
ok * Water
ok * Editing on/off toggling
ok * added snow/rain
ok * rudimentary formation-support
ok * name-support
ok * correct saving of players
ok * formation - partly
ok * differentiate between running and going
ok * big maps (view)
ok * normal for minimap in decast
ok * Minimap
ok * Water and terrain parted
ok * fixed strange error when generating images
ok * entities in minimap
ok * big map support in editing
ok * smaller image saving (discard unused parts) - saves about 2/3 of memory usage
ok * some other trees/plants
ok * some stones/rocks
* support different grass heights by drawing
* support item placing in edit mode
* game-object with scripting
* ant_geometry restructure
* prevent flickering with constant sorting (somehow)
* check lighting (is adding white light - should be multiplication)


* Player-AI improvements:
  1. nur Sitzen
  2. greift auch an, sobald irgendwie Vorrat zu ende
  3. 

* story-telling
	- some window popping up, telling some sentences, can be clicked away, but simply clicking on it.
	- some buttons to go back and forward (history-function)
	- game is paused while reading
	- to the left there is a picture of the speaking person (or an image of the book or so)
	- (later: some browsing facility, which lets you choose scenes)
	- sentence id: scene=>number(person)=>text
  
* story
  * Am Anfang kurzes Intro:
    * verschleierter Rückblick auf Powermonger (Thorn & Tisch); danach Auszug; am Schluß irgendein Sieg
  * 1.Szene: mit Kutsche und ein paar Leichen; auf der Seite sind noch die Angreifer
  * 2.Szene: Höhle mit Druide

* Formation
  Sitzen:
    - jeder "Man" bekommt platz zugewiesen, wenn er move-job erledigt hat
  Laufen:
    - jeder "Man bekommt relativen platz zugewiesen, den er mit laufen erreichen will
  => 2 speeds: Laufen, gehen
  
* tiles:
  - aufteilen wasser/land
  - land speichern mit minimum bildung, wenn minimale höhe höher als wasser
  - bilder schneiden /rundum - um platz zu sparen
  - speichern der 0-position in XML-File
  - (Bilder zusammen in große Sammlung speichern)

* Grafik:
  - Schnee: einteilen der Bilder in Schnee/non-Schnee und dann langsam hinzufügen?
  - Blumen
  - Büsche
  
7) Schafe/Futteranzeige
8) Sterben/Abhauen wenn kein Futter da
9) HouseEntity
10) HouseEntity-Player
	a) Futter sammeln
	b) Fortpflanzung
11) Loyalität implementieren
	a) zu viele Kämpfe => runter
	b) Kampf gewonnen => hoch!!
	c) Gut im Futter => hoch
	d) rasten => hoch
	e) schlechter Wetter =>runter
	
	f) wenn runter => abhauen zu nächstem HouseEntity (sowohl für HouseEntities as auch für Heros als Ausgangsposition)

  
* scrolling-borders  
* Level-Unterstützung per ruby
* Editing mode: heightstep (+/-), radius (through buttons or so)
* saving/loading-dialog
* integrate winter/summer into AntargisMap
* Water-animation:
	- simply subdevide water/land-tiles into land and water, with land being truncated below the height of water - afterwards add water and land tiles.
* Lighting:
	- overlay tiles with black rectangles (alpha=0.3 or so), maybe align rectangles (or better quads, or even better 3 points per iso-border) along tiles. maybe even use blending alpha
	  from 0.3 to 0.8 or so 
	- this can also be used for fog of war
	- using stencil buffer
	- overwriting with texture decreases stencil (or sets it to 0)
	- overwriting with rectangle incs stencil (or sets it to 1), but only if stencil=0
	- feiern!!!!!!!!!
  - einfacher mit VertexColors, beim blitting!! wird auch nur da gemalt, wo es sein soll!
  
* fallende Bäume - einfach die Kontrollpunkte in Baum speichern, erst danach rendern, Kontrollpunkte drehen um Fußpunkt, dabei immer über 0-Ebene halten - so kollidiert der Baum auch mit Erde

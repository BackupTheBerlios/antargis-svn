/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif

/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Initialize Ruby runtime support */
static void
SWIG_Ruby_InitRuntime(void)
{
    VALUE pointer;
    
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
    
    /* first check if pointer already created */
    pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
    if (pointer != Qnil) {
      Data_Get_Struct(pointer, swig_type_info *, swig_type_list_handle);
    } else {
      /* register a new class */
      VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
      /* create and store the structure pointer to a global variable */
      swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, swig_type_list_handle);
      rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
    }
}

/* Define Ruby class for C type */
static void
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
static VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
static VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
static SWIGINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
static int
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_type_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static SWIGINLINE void *
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
static SWIGINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

static VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
static void
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CompleteIsoView swig_types[0] 
#define  SWIGTYPE_p_IsoView swig_types[1] 
#define  SWIGTYPE_p_AGRect swig_types[2] 
#define  SWIGTYPE_p_AGPainter swig_types[3] 
#define  SWIGTYPE_p_EditIsoView swig_types[4] 
#define  SWIGTYPE_p_SplineMapD swig_types[5] 
#define  SWIGTYPE_p_AGSignal swig_types[6] 
#define  SWIGTYPE_p_AntRect swig_types[7] 
#define  SWIGTYPE_p_AntPlayer swig_types[8] 
#define  SWIGTYPE_p_IVTile swig_types[9] 
#define  SWIGTYPE_p_AGPoint swig_types[10] 
#define  SWIGTYPE_p_unsigned_long swig_types[11] 
#define  SWIGTYPE_p_AVItem swig_types[12] 
#define  SWIGTYPE_p_AGWidget swig_types[13] 
#define  SWIGTYPE_p_MiniMap swig_types[14] 
#define  SWIGTYPE_p_std__listTAntEntity_p_t swig_types[15] 
#define  SWIGTYPE_p_AntargisMap swig_types[16] 
#define  SWIGTYPE_p_xmlpp__Node swig_types[17] 
#define  SWIGTYPE_p_AGEvent swig_types[18] 
#define  SWIGTYPE_p_AntEntity swig_types[19] 
#define  SWIGTYPE_p_Pos3D swig_types[20] 
#define  SWIGTYPE_p_AntHero swig_types[21] 
#define  SWIGTYPE_p_AGMessageObject swig_types[22] 
#define  SWIGTYPE_p_Pos2D swig_types[23] 
static swig_type_info *swig_types[25];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_libantargis
#define SWIG_name    "Libantargis"

static VALUE mLibantargis;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#include "rubyio.h"
#ifdef __cplusplus
}
#endif


#include "antargis.h"


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
    switch (code) {
        case SWIG_MemoryError:
            rb_raise(rb_eNoMemError, msg);
            break;
        case SWIG_IOError:
            rb_raise(rb_eIOError, msg);
            break;
        case SWIG_RuntimeError:
            rb_raise(rb_eRuntimeError, msg);
            break;
        case SWIG_IndexError:
            rb_raise(rb_eIndexError, msg);
            break;
        case SWIG_TypeError:
            rb_raise(rb_eTypeError, msg);
            break;
        case SWIG_DivisionByZero:
            rb_raise(rb_eZeroDivError, msg);
            break;
        case SWIG_OverflowError:
            rb_raise(rb_eRangeError, msg);
            break;
        case SWIG_SyntaxError:
            rb_raise(rb_eSyntaxError, msg);
            break;
        case SWIG_ValueError:
            rb_raise(rb_eArgError, msg);
            break;
        case SWIG_SystemError:
            rb_raise(rb_eFatal, msg);
            break;
        case SWIG_UnknownError:
            rb_raise(rb_eRuntimeError, msg);
            break;
        default:
            break;
    }
}

#define SWIG_exception(a, b) SWIG_exception_((a), (b))


#include <stdexcept>


#include <string>


swig_class cMiniMap;
static void free_MiniMap(MiniMap *);

swig_class cAntargisMap;
static void free_AntargisMap(AntargisMap *);

swig_class cIVTile;
static void free_IVTile(IVTile *);

swig_class cIsoView;
static void free_IsoView(IsoView *);

swig_class cCompleteIsoView;
static void free_CompleteIsoView(CompleteIsoView *);

swig_class cEditIsoView;
static void free_EditIsoView(EditIsoView *);
/***********************************************************************
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Ruby extensions.
 *
 * Author : Lyle Johnson (lyle@users.sourceforge.net)
 *          Based on the original Python implementation by
 *          Mark Rose (mrose@stm.lbl.gov).
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException {
    protected:
      VALUE swig_error;
    protected:
      DirectorException(VALUE error=Qnil) : swig_error(error) {}
    public:
      VALUE getType() const  { 
        return CLASS_OF(swig_error); 
      }
      VALUE getError() const {
        return swig_error;
      }
      virtual ~DirectorException() {}
  };

  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char *msg="") {
        VALUE str = rb_str_new2("Swig director type mismatch: ");
        rb_str_concat(str, rb_str_new2(msg));
        swig_error = rb_exc_new3(rb_eTypeError, str);
      }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
    public:
      DirectorMethodException(VALUE error) : Swig::DirectorException(error) {}
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif

  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped Ruby object */
      VALUE swig_self;
      /* flag indicating whether the object is owned by Ruby or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a Ruby object, optionally taking ownership */
      Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
      }

      /* discard our reference at destruction */
      virtual ~Director() {
      }

      /* return a pointer to the wrapped Ruby object */
      VALUE swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped Ruby object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return false;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped Ruby object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true;
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped Ruby object (the sense of "disown"
       * is from Ruby) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag = true;
        } 
      }
  };

  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "antargisruby.h"

SwigDirector_MiniMap::SwigDirector_MiniMap(VALUE self, AGWidget *pParent, AGRect const &r, AntargisMap *pMap, AGRect const &pViewRect): MiniMap(pParent, r, pMap, pViewRect), Swig::Director(self) {
    
}



void SwigDirector_MiniMap::draw(AGPainter &p) {
    VALUE obj0 = Qnil ;
    VALUE result;
    
    if (swig_get_up()) {
        MiniMap::draw(p);
        return;
    }
    obj0 = SWIG_NewPointerObj(&p, SWIGTYPE_p_AGPainter, 0);
    result = rb_funcall(swig_get_self(), rb_intern("draw"), 1,obj0);
}


SwigDirector_CompleteIsoView::SwigDirector_CompleteIsoView(VALUE self, AGWidget *parent, AGRect r, Pos3D p, AntargisMap *map): CompleteIsoView(parent, r, p, map), Swig::Director(self) {
    
}



bool SwigDirector_CompleteIsoView::eventDragBy(AGEvent const *event, AGPoint const &pDiff) {
    AGEvent * nc_tmp_event = const_cast<AGEvent *>(event) ;
    VALUE obj0 = Qnil ;
    AGPoint * nc_tmp_pDiff = const_cast<AGPoint *>(&pDiff) ;
    VALUE obj1 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return CompleteIsoView::eventDragBy(event,pDiff);
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_event, SWIGTYPE_p_AGEvent, 0);
    obj1 = SWIG_NewPointerObj(nc_tmp_pDiff, SWIGTYPE_p_AGPoint, 0);
    result = rb_funcall(swig_get_self(), rb_intern("eventDragBy"), 2,obj0,obj1);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


SwigDirector_EditIsoView::SwigDirector_EditIsoView(VALUE self, AGWidget *parent, AGRect r, Pos3D p, AntargisMap *map): EditIsoView(parent, r, p, map), Swig::Director(self) {
    
}



bool SwigDirector_EditIsoView::eventDragBy(AGEvent const *event, AGPoint const &pDiff) {
    AGEvent * nc_tmp_event = const_cast<AGEvent *>(event) ;
    VALUE obj0 = Qnil ;
    AGPoint * nc_tmp_pDiff = const_cast<AGPoint *>(&pDiff) ;
    VALUE obj1 = Qnil ;
    bool c_result ;
    VALUE result;
    
    if (swig_get_up()) {
        return EditIsoView::eventDragBy(event,pDiff);
    }
    obj0 = SWIG_NewPointerObj(nc_tmp_event, SWIGTYPE_p_AGEvent, 0);
    obj1 = SWIG_NewPointerObj(nc_tmp_pDiff, SWIGTYPE_p_AGPoint, 0);
    result = rb_funcall(swig_get_self(), rb_intern("eventDragBy"), 2,obj0,obj1);
    c_result = (bool) RTEST(result);
    return (bool) c_result;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_MiniMap_allocate(VALUE self) {
#else
    static VALUE
    _wrap_MiniMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_MiniMap);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_MiniMap(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    AGWidget *arg2 = (AGWidget *) 0 ;
    AGRect *arg3 = 0 ;
    AntargisMap *arg4 = (AntargisMap *) 0 ;
    AGRect *arg5 = 0 ;
    MiniMap *result;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGWidget, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGRect, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_AGRect, 1); if (arg5 == NULL) rb_raise(rb_eTypeError, "null reference");
    char *classname = "Libantargis::MiniMap";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (MiniMap *)new SwigDirector_MiniMap(arg1,arg2,(AGRect const &)*arg3,arg4,(AGRect const &)*arg5);
        
    } else {
        result = (MiniMap *)new MiniMap(arg2,(AGRect const &)*arg3,arg4,(AGRect const &)*arg5);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_MiniMap_draw(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    AGPainter *arg2 = 0 ;
    Swig::Director *director = 0;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGPainter, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    (arg1)->draw(*arg2);
    
    return Qnil;
}


static VALUE
_wrap_MiniMap_update(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    (arg1)->update();
    
    return Qnil;
}


static VALUE
_wrap_MiniMap_drawEntities(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    AGPoint *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->drawEntities((AGPoint const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_MiniMap_sigMoveMap_set(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    AGSignal arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    {
        AGSignal * ptr;
        SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_AGSignal, 1);
        if (ptr) arg2 = *ptr;
    }
    if (arg1) (arg1)->sigMoveMap = arg2;
    
    return Qnil;
}


static VALUE
_wrap_MiniMap_sigMoveMap_get(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    AGSignal result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    result =  ((arg1)->sigMoveMap);
    
    {
        AGSignal * resultptr;
        resultptr = new AGSignal((AGSignal &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_AGSignal, 1);
    }
    return vresult;
}


static void
free_MiniMap(MiniMap *arg1) {
    delete arg1;
}
static VALUE
_wrap_disown_MiniMap(int argc, VALUE *argv, VALUE self) {
    MiniMap *arg1 = (MiniMap *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_MiniMap, 1);
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_AntargisMap_allocate(VALUE self) {
#else
    static VALUE
    _wrap_AntargisMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_AntargisMap);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_AntargisMap(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    int arg2 ;
    AntargisMap *result;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = NUM2INT(argv[0]);
    arg2 = NUM2INT(argv[1]);
    result = (AntargisMap *)new AntargisMap(arg1,arg2);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_AntargisMap_getHeight(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    Pos2D *arg2 = 0 ;
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Pos2D, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (float)((AntargisMap const *)arg1)->getHeight((Pos2D const &)*arg2);
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_AntargisMap_getGHeight(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    Pos2D *arg2 = 0 ;
    float result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Pos2D, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (float)((AntargisMap const *)arg1)->getGHeight((Pos2D const &)*arg2);
    
    vresult = rb_float_new(result);
    return vresult;
}


static VALUE
_wrap_AntargisMap_getPatchH(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    int arg3 ;
    SplineMapD result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = ((AntargisMap const *)arg1)->getPatchH(arg2,arg3);
    
    {
        SplineMapD * resultptr;
        resultptr = new SplineMapD((SplineMapD &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SplineMapD, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_getPatchG(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    int arg3 ;
    SplineMapD result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = ((AntargisMap const *)arg1)->getPatchG(arg2,arg3);
    
    {
        SplineMapD * resultptr;
        resultptr = new SplineMapD((SplineMapD &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SplineMapD, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_getNewID(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = (int)(arg1)->getNewID();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_AntargisMap_getNormal(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    int arg3 ;
    Pos3D result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    result = ((AntargisMap const *)arg1)->getNormal(arg2,arg3);
    
    {
        Pos3D * resultptr;
        resultptr = new Pos3D((Pos3D &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Pos3D, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_insertEntity(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntEntity *arg2 = (AntEntity *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntEntity, 1);
    (arg1)->insertEntity(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_addPyramid(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    (arg1)->addPyramid(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_addFlat(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    arg5 = NUM2INT(argv[3]);
    (arg1)->addFlat(arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_setAllWater(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    (arg1)->setAllWater();
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_setAllLand(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    (arg1)->setAllLand();
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_getEntities(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntRect *arg2 = 0 ;
    std::list<AntEntity * > result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntRect, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->getEntities((AntRect const &)*arg2);
    
    {
        std::list<AntEntity * > * resultptr;
        resultptr = new std::list<AntEntity * >((std::list<AntEntity * > &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__listTAntEntity_p_t, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_getAllEntities(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    std::list<AntEntity * > result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = (arg1)->getAllEntities();
    
    {
        std::list<AntEntity * > * resultptr;
        resultptr = new std::list<AntEntity * >((std::list<AntEntity * > &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__listTAntEntity_p_t, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_getPos3D(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    Pos2D *arg2 = 0 ;
    Pos3D result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Pos2D, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = ((AntargisMap const *)arg1)->getPos3D((Pos2D const &)*arg2);
    
    {
        Pos3D * resultptr;
        resultptr = new Pos3D((Pos3D &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Pos3D, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_move(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    float arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = (float) NUM2DBL(argv[0]);
    (arg1)->move(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_clear(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    (arg1)->clear();
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_addPlayer(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntPlayer *arg2 = (AntPlayer *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntPlayer, 1);
    (arg1)->addPlayer(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_removePlayer(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntPlayer *arg2 = (AntPlayer *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntPlayer, 1);
    (arg1)->removePlayer(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_removeEntity(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntEntity *arg2 = (AntEntity *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntEntity, 1);
    (arg1)->removeEntity(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_truncPos(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    Pos2D *arg2 = 0 ;
    Pos2D result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Pos2D, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = ((AntargisMap const *)arg1)->truncPos((Pos2D const &)*arg2);
    
    {
        Pos2D * resultptr;
        resultptr = new Pos2D((Pos2D &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Pos2D, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_getEntity(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int arg2 ;
    AntEntity *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    arg2 = NUM2INT(argv[0]);
    result = (AntEntity *)((AntargisMap const *)arg1)->getEntity(arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AntEntity,0);
    return vresult;
}


static VALUE
_wrap_AntargisMap_killHero(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    AntHero *arg2 = (AntHero *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntHero, 1);
    (arg1)->killHero(arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_paused(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = (bool)(arg1)->paused();
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_AntargisMap_pause(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    (arg1)->pause();
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_unpause(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    (arg1)->unpause();
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_getMaxPos(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    Pos2D result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = ((AntargisMap const *)arg1)->getMaxPos();
    
    {
        Pos2D * resultptr;
        resultptr = new Pos2D((Pos2D &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_Pos2D, 1);
    }
    return vresult;
}


static VALUE
_wrap_AntargisMap_saveMap(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    {
        if (TYPE(argv[0]) == T_STRING) {
            temp2 = std::string(StringValuePtr(argv[0]));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "not a string");
        }
    }
    (arg1)->saveMap((std::string const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_loadMap(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    {
        if (TYPE(argv[0]) == T_STRING) {
            temp2 = std::string(StringValuePtr(argv[0]));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "not a string");
        }
    }
    (arg1)->loadMap((std::string const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_saveXML(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    xmlpp::Node *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_xmlpp__Node, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    ((AntargisMap const *)arg1)->saveXML(*arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_loadXML(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    xmlpp::Node *arg2 = 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_xmlpp__Node, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->loadXML((xmlpp::Node const &)*arg2);
    
    return Qnil;
}


static VALUE
_wrap_AntargisMap_width(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = (int)((AntargisMap const *)arg1)->width();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_AntargisMap_height(int argc, VALUE *argv, VALUE self) {
    AntargisMap *arg1 = (AntargisMap *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_AntargisMap, 1);
    result = (int)((AntargisMap const *)arg1)->height();
    
    vresult = INT2NUM(result);
    return vresult;
}


static void
free_AntargisMap(AntargisMap *arg1) {
    delete arg1;
}
static VALUE
_wrap_getMap(int argc, VALUE *argv, VALUE self) {
    AntargisMap *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (AntargisMap *)getMap();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AntargisMap,0);
    return vresult;
}


static VALUE
_wrap_IVTile_x_set(int argc, VALUE *argv, VALUE self) {
    IVTile *arg1 = (IVTile *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IVTile, 1);
    arg2 = NUM2INT(argv[0]);
    if (arg1) (arg1)->x = arg2;
    
    return Qnil;
}


static VALUE
_wrap_IVTile_x_get(int argc, VALUE *argv, VALUE self) {
    IVTile *arg1 = (IVTile *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IVTile, 1);
    result = (int) ((arg1)->x);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_IVTile_y_set(int argc, VALUE *argv, VALUE self) {
    IVTile *arg1 = (IVTile *) 0 ;
    int arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IVTile, 1);
    arg2 = NUM2INT(argv[0]);
    if (arg1) (arg1)->y = arg2;
    
    return Qnil;
}


static VALUE
_wrap_IVTile_y_get(int argc, VALUE *argv, VALUE self) {
    IVTile *arg1 = (IVTile *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IVTile, 1);
    result = (int) ((arg1)->y);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_IVTile___lt__(int argc, VALUE *argv, VALUE self) {
    IVTile *arg1 = (IVTile *) 0 ;
    IVTile *arg2 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IVTile, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_IVTile, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (bool)((IVTile const *)arg1)->operator <((IVTile const &)*arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_IVTile_allocate(VALUE self) {
#else
    static VALUE
    _wrap_IVTile_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_IVTile);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_IVTile(int argc, VALUE *argv, VALUE self) {
    IVTile *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (IVTile *)new IVTile();
    DATA_PTR(self) = result;
    return self;
}


static void
free_IVTile(IVTile *arg1) {
    delete arg1;
}
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_IsoView_allocate(VALUE self) {
#else
    static VALUE
    _wrap_IsoView_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_IsoView);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_IsoView(int argc, VALUE *argv, VALUE self) {
    AGWidget *arg1 = (AGWidget *) 0 ;
    AGRect arg2 ;
    Pos3D arg3 ;
    AntargisMap *arg4 = (AntargisMap *) 0 ;
    IsoView *result;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_AGWidget, 1);
    {
        AGRect * ptr;
        SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_AGRect, 1);
        if (ptr) arg2 = *ptr;
    }
    {
        Pos3D * ptr;
        SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_Pos3D, 1);
        if (ptr) arg3 = *ptr;
    }
    SWIG_ConvertPtr(argv[3], (void **) &arg4, SWIGTYPE_p_AntargisMap, 1);
    result = (IsoView *)new IsoView(arg1,arg2,arg3,arg4);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_IsoView_completeUpdate(int argc, VALUE *argv, VALUE self) {
    IsoView *arg1 = (IsoView *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IsoView, 1);
    (arg1)->completeUpdate();
    
    return Qnil;
}


static VALUE
_wrap_IsoView_update(int argc, VALUE *argv, VALUE self) {
    IsoView *arg1 = (IsoView *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IsoView, 1);
    (arg1)->update();
    
    return Qnil;
}


static VALUE
_wrap_IsoView_checkView(int argc, VALUE *argv, VALUE self) {
    IsoView *arg1 = (IsoView *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IsoView, 1);
    (arg1)->checkView();
    
    return Qnil;
}


static VALUE
_wrap_IsoView_getEntity(int argc, VALUE *argv, VALUE self) {
    IsoView *arg1 = (IsoView *) 0 ;
    AGPoint *arg2 = 0 ;
    std::list<AntEntity * > result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->getEntity((AGPoint const &)*arg2);
    
    {
        std::list<AntEntity * > * resultptr;
        resultptr = new std::list<AntEntity * >((std::list<AntEntity * > &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__listTAntEntity_p_t, 1);
    }
    return vresult;
}


static VALUE
_wrap_IsoView_getTile(int argc, VALUE *argv, VALUE self) {
    IsoView *arg1 = (IsoView *) 0 ;
    AGPoint *arg2 = 0 ;
    IVTile result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (arg1)->getTile((AGPoint const &)*arg2);
    
    {
        IVTile * resultptr;
        resultptr = new IVTile((IVTile &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_IVTile, 1);
    }
    return vresult;
}


static void
free_IsoView(IsoView *arg1) {
    delete arg1;
}
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_CompleteIsoView_allocate(VALUE self) {
#else
    static VALUE
    _wrap_CompleteIsoView_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CompleteIsoView);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_CompleteIsoView(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    AGWidget *arg2 = (AGWidget *) 0 ;
    AGRect arg3 ;
    Pos3D arg4 ;
    AntargisMap *arg5 = (AntargisMap *) 0 ;
    CompleteIsoView *result;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGWidget, 1);
    {
        AGRect * ptr;
        SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_AGRect, 1);
        if (ptr) arg3 = *ptr;
    }
    {
        Pos3D * ptr;
        SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_Pos3D, 1);
        if (ptr) arg4 = *ptr;
    }
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_AntargisMap, 1);
    char *classname = "Libantargis::CompleteIsoView";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (CompleteIsoView *)new SwigDirector_CompleteIsoView(arg1,arg2,arg3,arg4,arg5);
        
    } else {
        result = (CompleteIsoView *)new CompleteIsoView(arg2,arg3,arg4,arg5);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_CompleteIsoView_getHero(int argc, VALUE *argv, VALUE self) {
    CompleteIsoView *arg1 = (CompleteIsoView *) 0 ;
    std::list<AntEntity * > *arg2 = 0 ;
    AntHero *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_CompleteIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_std__listTAntEntity_p_t, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (AntHero *)(arg1)->getHero(*arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AntHero,0);
    return vresult;
}


static VALUE
_wrap_CompleteIsoView_eventDragBy(int argc, VALUE *argv, VALUE self) {
    CompleteIsoView *arg1 = (CompleteIsoView *) 0 ;
    AGEvent *arg2 = (AGEvent *) 0 ;
    AGPoint *arg3 = 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_CompleteIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGPoint, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->eventDragBy((AGEvent const *)arg2,(AGPoint const &)*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_CompleteIsoView_eventMouseClick(int argc, VALUE *argv, VALUE self) {
    CompleteIsoView *arg1 = (CompleteIsoView *) 0 ;
    AGEvent *arg2 = (AGEvent *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_CompleteIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGEvent, 1);
    result = (bool)(arg1)->eventMouseClick((AGEvent const *)arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_CompleteIsoView_isMyHero(int argc, VALUE *argv, VALUE self) {
    CompleteIsoView *arg1 = (CompleteIsoView *) 0 ;
    AntHero *arg2 = (AntHero *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_CompleteIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AntHero, 1);
    result = (bool)(arg1)->isMyHero(arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static void
free_CompleteIsoView(CompleteIsoView *arg1) {
    delete arg1;
}
static VALUE
_wrap_disown_CompleteIsoView(int argc, VALUE *argv, VALUE self) {
    CompleteIsoView *arg1 = (CompleteIsoView *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_CompleteIsoView, 1);
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_EditIsoView_allocate(VALUE self) {
#else
    static VALUE
    _wrap_EditIsoView_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_EditIsoView);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_EditIsoView(int argc, VALUE *argv, VALUE self) {
    VALUE arg1 ;
    AGWidget *arg2 = (AGWidget *) 0 ;
    AGRect arg3 ;
    Pos3D arg4 ;
    AntargisMap *arg5 = (AntargisMap *) 0 ;
    EditIsoView *result;
    
    if ((argc < 4) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc);
    arg1 = self;
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGWidget, 1);
    {
        AGRect * ptr;
        SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_AGRect, 1);
        if (ptr) arg3 = *ptr;
    }
    {
        Pos3D * ptr;
        SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_Pos3D, 1);
        if (ptr) arg4 = *ptr;
    }
    SWIG_ConvertPtr(argv[3], (void **) &arg5, SWIGTYPE_p_AntargisMap, 1);
    char *classname = "Libantargis::EditIsoView";
    if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (EditIsoView *)new SwigDirector_EditIsoView(arg1,arg2,arg3,arg4,arg5);
        
    } else {
        result = (EditIsoView *)new EditIsoView(arg2,arg3,arg4,arg5);
        
    }
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_EditIsoView_toggleEdit(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    (arg1)->toggleEdit();
    
    return Qnil;
}


static VALUE
_wrap_EditIsoView_selectSize(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    char *arg2 = (char *) 0 ;
    AGEvent *arg3 = (AGEvent *) 0 ;
    AGMessageObject *arg4 = (AGMessageObject *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AGMessageObject, 1);
    result = (bool)(arg1)->selectSize((char const *)arg2,(AGEvent const *)arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_setAll(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    char *arg2 = (char *) 0 ;
    AGEvent *arg3 = (AGEvent *) 0 ;
    AGMessageObject *arg4 = (AGMessageObject *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AGMessageObject, 1);
    result = (bool)(arg1)->setAll((char const *)arg2,(AGEvent const *)arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_addEntity(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    char *arg2 = (char *) 0 ;
    AGEvent *arg3 = (AGEvent *) 0 ;
    AGMessageObject *arg4 = (AGMessageObject *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AGMessageObject, 1);
    result = (bool)(arg1)->addEntity((char const *)arg2,(AGEvent const *)arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_setRubber(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    char *arg2 = (char *) 0 ;
    AGEvent *arg3 = (AGEvent *) 0 ;
    AGMessageObject *arg4 = (AGMessageObject *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AGMessageObject, 1);
    result = (bool)(arg1)->setRubber((char const *)arg2,(AGEvent const *)arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_togglePoints(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    char *arg2 = (char *) 0 ;
    AGEvent *arg3 = (AGEvent *) 0 ;
    AGMessageObject *arg4 = (AGMessageObject *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_AGMessageObject, 1);
    result = (bool)(arg1)->togglePoints((char const *)arg2,(AGEvent const *)arg3,arg4);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_eventDragBy(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGEvent *arg2 = (AGEvent *) 0 ;
    AGPoint *arg3 = 0 ;
    bool result;
    Swig::Director *director = 0;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGEvent, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_AGPoint, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self() == self)) director->swig_set_up();
    result = (bool)(arg1)->eventDragBy((AGEvent const *)arg2,(AGPoint const &)*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_eventMouseClick(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGEvent *arg2 = (AGEvent *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGEvent, 1);
    result = (bool)(arg1)->eventMouseClick((AGEvent const *)arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_getClosest(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGPoint *arg2 = 0 ;
    AVItem *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGPoint, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (AVItem *)((EditIsoView const *)arg1)->getClosest((AGPoint const &)*arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AVItem,0);
    return vresult;
}


static VALUE
_wrap_EditIsoView_toggleShowPoints(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    (arg1)->toggleShowPoints();
    
    return Qnil;
}


static VALUE
_wrap_EditIsoView_eventMouseMotion(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGEvent *arg2 = (AGEvent *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_AGEvent, 1);
    result = (bool)(arg1)->eventMouseMotion((AGEvent const *)arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_EditIsoView_editAt(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    Pos3D *arg2 = 0 ;
    bool arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Pos3D, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    arg3 = RTEST(argv[1]);
    (arg1)->editAt((Pos3D const &)*arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_EditIsoView_sigMapEdited_set(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGSignal arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    {
        AGSignal * ptr;
        SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_AGSignal, 1);
        if (ptr) arg2 = *ptr;
    }
    if (arg1) (arg1)->sigMapEdited = arg2;
    
    return Qnil;
}


static VALUE
_wrap_EditIsoView_sigMapEdited_get(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    AGSignal result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    result =  ((arg1)->sigMapEdited);
    
    {
        AGSignal * resultptr;
        resultptr = new AGSignal((AGSignal &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_AGSignal, 1);
    }
    return vresult;
}


static void
free_EditIsoView(EditIsoView *arg1) {
    delete arg1;
}
static VALUE
_wrap_disown_EditIsoView(int argc, VALUE *argv, VALUE self) {
    EditIsoView *arg1 = (EditIsoView *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_EditIsoView, 1);
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    return Qnil;
}


static VALUE
_wrap_toEditIsoView(int argc, VALUE *argv, VALUE self) {
    AGWidget *arg1 = 0 ;
    EditIsoView *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_AGWidget, 1); if (arg1 == NULL) rb_raise(rb_eTypeError, "null reference");
    {
        EditIsoView &_result_ref = toEditIsoView(*arg1);
        result = (EditIsoView *) &_result_ref;
    }
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_EditIsoView,0);
    return vresult;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CompleteIsoViewTo_p_IsoView(void *x) {
    return (void *)((IsoView *)  ((CompleteIsoView *) x));
}
static void *_p_EditIsoViewTo_p_IsoView(void *x) {
    return (void *)((IsoView *) (CompleteIsoView *) ((EditIsoView *) x));
}
static void *_p_EditIsoViewTo_p_CompleteIsoView(void *x) {
    return (void *)((CompleteIsoView *)  ((EditIsoView *) x));
}
static void *_p_MiniMapTo_p_AGWidget(void *x) {
    return (void *)((AGWidget *)  ((MiniMap *) x));
}
static swig_type_info _swigt__p_CompleteIsoView[] = {{"_p_CompleteIsoView", 0, "CompleteIsoView *", 0, 0, 0, 0},{"_p_CompleteIsoView", 0, 0, 0, 0, 0, 0},{"_p_EditIsoView", _p_EditIsoViewTo_p_CompleteIsoView, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_IsoView[] = {{"_p_IsoView", 0, "IsoView *", 0, 0, 0, 0},{"_p_IsoView", 0, 0, 0, 0, 0, 0},{"_p_CompleteIsoView", _p_CompleteIsoViewTo_p_IsoView, 0, 0, 0, 0, 0},{"_p_EditIsoView", _p_EditIsoViewTo_p_IsoView, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGRect[] = {{"_p_AGRect", 0, "AGRect *", 0, 0, 0, 0},{"_p_AGRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGPainter[] = {{"_p_AGPainter", 0, "AGPainter *", 0, 0, 0, 0},{"_p_AGPainter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_EditIsoView[] = {{"_p_EditIsoView", 0, "EditIsoView *", 0, 0, 0, 0},{"_p_EditIsoView", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SplineMapD[] = {{"_p_SplineMapD", 0, "SplineMapD *", 0, 0, 0, 0},{"_p_SplineMapD", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGSignal[] = {{"_p_AGSignal", 0, "AGSignal *", 0, 0, 0, 0},{"_p_AGSignal", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AntRect[] = {{"_p_AntRect", 0, "AntRect *", 0, 0, 0, 0},{"_p_AntRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AntPlayer[] = {{"_p_AntPlayer", 0, "AntPlayer *", 0, 0, 0, 0},{"_p_AntPlayer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_IVTile[] = {{"_p_IVTile", 0, "IVTile *", 0, 0, 0, 0},{"_p_IVTile", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGPoint[] = {{"_p_AGPoint", 0, "AGPoint *", 0, 0, 0, 0},{"_p_AGPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *|VALUE *", 0, 0, 0, 0},{"_p_unsigned_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AVItem[] = {{"_p_AVItem", 0, "AVItem *", 0, 0, 0, 0},{"_p_AVItem", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGWidget[] = {{"_p_AGWidget", 0, "AGWidget *", 0, 0, 0, 0},{"_p_AGWidget", 0, 0, 0, 0, 0, 0},{"_p_MiniMap", _p_MiniMapTo_p_AGWidget, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MiniMap[] = {{"_p_MiniMap", 0, "MiniMap *", 0, 0, 0, 0},{"_p_MiniMap", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__listTAntEntity_p_t[] = {{"_p_std__listTAntEntity_p_t", 0, "std::list<AntEntity * > *", 0, 0, 0, 0},{"_p_std__listTAntEntity_p_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AntargisMap[] = {{"_p_AntargisMap", 0, "AntargisMap *", 0, 0, 0, 0},{"_p_AntargisMap", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_xmlpp__Node[] = {{"_p_xmlpp__Node", 0, "xmlpp::Node *", 0, 0, 0, 0},{"_p_xmlpp__Node", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGEvent[] = {{"_p_AGEvent", 0, "AGEvent *", 0, 0, 0, 0},{"_p_AGEvent", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AntEntity[] = {{"_p_AntEntity", 0, "AntEntity *", 0, 0, 0, 0},{"_p_AntEntity", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Pos3D[] = {{"_p_Pos3D", 0, "Pos3D *", 0, 0, 0, 0},{"_p_Pos3D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AntHero[] = {{"_p_AntHero", 0, "AntHero *", 0, 0, 0, 0},{"_p_AntHero", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AGMessageObject[] = {{"_p_AGMessageObject", 0, "AGMessageObject *", 0, 0, 0, 0},{"_p_AGMessageObject", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Pos2D[] = {{"_p_Pos2D", 0, "Pos2D *", 0, 0, 0, 0},{"_p_Pos2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CompleteIsoView, 
_swigt__p_IsoView, 
_swigt__p_AGRect, 
_swigt__p_AGPainter, 
_swigt__p_EditIsoView, 
_swigt__p_SplineMapD, 
_swigt__p_AGSignal, 
_swigt__p_AntRect, 
_swigt__p_AntPlayer, 
_swigt__p_IVTile, 
_swigt__p_AGPoint, 
_swigt__p_unsigned_long, 
_swigt__p_AVItem, 
_swigt__p_AGWidget, 
_swigt__p_MiniMap, 
_swigt__p_std__listTAntEntity_p_t, 
_swigt__p_AntargisMap, 
_swigt__p_xmlpp__Node, 
_swigt__p_AGEvent, 
_swigt__p_AntEntity, 
_swigt__p_Pos3D, 
_swigt__p_AntHero, 
_swigt__p_AGMessageObject, 
_swigt__p_Pos2D, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) Init_libantargis(void) {
    int i;
    
    SWIG_InitRuntime();
    mLibantargis = rb_define_module("Libantargis");
    
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        SWIG_define_class(swig_types[i]);
    }
    
    rb_define_module_function(mLibantargis, "disown_MiniMap", VALUEFUNC(_wrap_disown_MiniMap), -1);
    
    cMiniMap.klass = rb_define_class_under(mLibantargis, "MiniMap", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_MiniMap, (void *) &cMiniMap);
    rb_define_alloc_func(cMiniMap.klass, _wrap_MiniMap_allocate);
    rb_define_method(cMiniMap.klass, "initialize", VALUEFUNC(_wrap_new_MiniMap), -1);
    rb_define_method(cMiniMap.klass, "draw", VALUEFUNC(_wrap_MiniMap_draw), -1);
    rb_define_method(cMiniMap.klass, "update", VALUEFUNC(_wrap_MiniMap_update), -1);
    rb_define_method(cMiniMap.klass, "drawEntities", VALUEFUNC(_wrap_MiniMap_drawEntities), -1);
    rb_define_method(cMiniMap.klass, "sigMoveMap=", VALUEFUNC(_wrap_MiniMap_sigMoveMap_set), -1);
    rb_define_method(cMiniMap.klass, "sigMoveMap", VALUEFUNC(_wrap_MiniMap_sigMoveMap_get), -1);
    cMiniMap.mark = 0;
    cMiniMap.destroy = (void (*)(void *)) free_MiniMap;
    
    cAntargisMap.klass = rb_define_class_under(mLibantargis, "AntargisMap", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_AntargisMap, (void *) &cAntargisMap);
    rb_define_alloc_func(cAntargisMap.klass, _wrap_AntargisMap_allocate);
    rb_define_method(cAntargisMap.klass, "initialize", VALUEFUNC(_wrap_new_AntargisMap), -1);
    rb_define_method(cAntargisMap.klass, "getHeight", VALUEFUNC(_wrap_AntargisMap_getHeight), -1);
    rb_define_method(cAntargisMap.klass, "getGHeight", VALUEFUNC(_wrap_AntargisMap_getGHeight), -1);
    rb_define_method(cAntargisMap.klass, "getPatchH", VALUEFUNC(_wrap_AntargisMap_getPatchH), -1);
    rb_define_method(cAntargisMap.klass, "getPatchG", VALUEFUNC(_wrap_AntargisMap_getPatchG), -1);
    rb_define_method(cAntargisMap.klass, "getNewID", VALUEFUNC(_wrap_AntargisMap_getNewID), -1);
    rb_define_method(cAntargisMap.klass, "getNormal", VALUEFUNC(_wrap_AntargisMap_getNormal), -1);
    rb_define_method(cAntargisMap.klass, "insertEntity", VALUEFUNC(_wrap_AntargisMap_insertEntity), -1);
    rb_define_method(cAntargisMap.klass, "addPyramid", VALUEFUNC(_wrap_AntargisMap_addPyramid), -1);
    rb_define_method(cAntargisMap.klass, "addFlat", VALUEFUNC(_wrap_AntargisMap_addFlat), -1);
    rb_define_method(cAntargisMap.klass, "setAllWater", VALUEFUNC(_wrap_AntargisMap_setAllWater), -1);
    rb_define_method(cAntargisMap.klass, "setAllLand", VALUEFUNC(_wrap_AntargisMap_setAllLand), -1);
    rb_define_method(cAntargisMap.klass, "getEntities", VALUEFUNC(_wrap_AntargisMap_getEntities), -1);
    rb_define_method(cAntargisMap.klass, "getAllEntities", VALUEFUNC(_wrap_AntargisMap_getAllEntities), -1);
    rb_define_method(cAntargisMap.klass, "getPos3D", VALUEFUNC(_wrap_AntargisMap_getPos3D), -1);
    rb_define_method(cAntargisMap.klass, "move", VALUEFUNC(_wrap_AntargisMap_move), -1);
    rb_define_method(cAntargisMap.klass, "clear", VALUEFUNC(_wrap_AntargisMap_clear), -1);
    rb_define_method(cAntargisMap.klass, "addPlayer", VALUEFUNC(_wrap_AntargisMap_addPlayer), -1);
    rb_define_method(cAntargisMap.klass, "removePlayer", VALUEFUNC(_wrap_AntargisMap_removePlayer), -1);
    rb_define_method(cAntargisMap.klass, "removeEntity", VALUEFUNC(_wrap_AntargisMap_removeEntity), -1);
    rb_define_method(cAntargisMap.klass, "truncPos", VALUEFUNC(_wrap_AntargisMap_truncPos), -1);
    rb_define_method(cAntargisMap.klass, "getEntity", VALUEFUNC(_wrap_AntargisMap_getEntity), -1);
    rb_define_method(cAntargisMap.klass, "killHero", VALUEFUNC(_wrap_AntargisMap_killHero), -1);
    rb_define_method(cAntargisMap.klass, "paused", VALUEFUNC(_wrap_AntargisMap_paused), -1);
    rb_define_method(cAntargisMap.klass, "pause", VALUEFUNC(_wrap_AntargisMap_pause), -1);
    rb_define_method(cAntargisMap.klass, "unpause", VALUEFUNC(_wrap_AntargisMap_unpause), -1);
    rb_define_method(cAntargisMap.klass, "getMaxPos", VALUEFUNC(_wrap_AntargisMap_getMaxPos), -1);
    rb_define_method(cAntargisMap.klass, "saveMap", VALUEFUNC(_wrap_AntargisMap_saveMap), -1);
    rb_define_method(cAntargisMap.klass, "loadMap", VALUEFUNC(_wrap_AntargisMap_loadMap), -1);
    rb_define_method(cAntargisMap.klass, "saveXML", VALUEFUNC(_wrap_AntargisMap_saveXML), -1);
    rb_define_method(cAntargisMap.klass, "loadXML", VALUEFUNC(_wrap_AntargisMap_loadXML), -1);
    rb_define_method(cAntargisMap.klass, "width", VALUEFUNC(_wrap_AntargisMap_width), -1);
    rb_define_method(cAntargisMap.klass, "height", VALUEFUNC(_wrap_AntargisMap_height), -1);
    cAntargisMap.mark = 0;
    cAntargisMap.destroy = (void (*)(void *)) free_AntargisMap;
    rb_define_module_function(mLibantargis, "getMap", VALUEFUNC(_wrap_getMap), -1);
    
    cIVTile.klass = rb_define_class_under(mLibantargis, "IVTile", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_IVTile, (void *) &cIVTile);
    rb_define_alloc_func(cIVTile.klass, _wrap_IVTile_allocate);
    rb_define_method(cIVTile.klass, "initialize", VALUEFUNC(_wrap_new_IVTile), -1);
    rb_define_method(cIVTile.klass, "x=", VALUEFUNC(_wrap_IVTile_x_set), -1);
    rb_define_method(cIVTile.klass, "x", VALUEFUNC(_wrap_IVTile_x_get), -1);
    rb_define_method(cIVTile.klass, "y=", VALUEFUNC(_wrap_IVTile_y_set), -1);
    rb_define_method(cIVTile.klass, "y", VALUEFUNC(_wrap_IVTile_y_get), -1);
    rb_define_method(cIVTile.klass, "<", VALUEFUNC(_wrap_IVTile___lt__), -1);
    cIVTile.mark = 0;
    cIVTile.destroy = (void (*)(void *)) free_IVTile;
    
    cIsoView.klass = rb_define_class_under(mLibantargis, "IsoView", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_IsoView, (void *) &cIsoView);
    rb_define_alloc_func(cIsoView.klass, _wrap_IsoView_allocate);
    rb_define_method(cIsoView.klass, "initialize", VALUEFUNC(_wrap_new_IsoView), -1);
    rb_define_method(cIsoView.klass, "completeUpdate", VALUEFUNC(_wrap_IsoView_completeUpdate), -1);
    rb_define_method(cIsoView.klass, "update", VALUEFUNC(_wrap_IsoView_update), -1);
    rb_define_method(cIsoView.klass, "checkView", VALUEFUNC(_wrap_IsoView_checkView), -1);
    rb_define_method(cIsoView.klass, "getEntity", VALUEFUNC(_wrap_IsoView_getEntity), -1);
    rb_define_method(cIsoView.klass, "getTile", VALUEFUNC(_wrap_IsoView_getTile), -1);
    cIsoView.mark = 0;
    cIsoView.destroy = (void (*)(void *)) free_IsoView;
    rb_define_module_function(mLibantargis, "disown_CompleteIsoView", VALUEFUNC(_wrap_disown_CompleteIsoView), -1);
    
    cCompleteIsoView.klass = rb_define_class_under(mLibantargis, "CompleteIsoView", ((swig_class *) SWIGTYPE_p_IsoView->clientdata)->klass);
    SWIG_TypeClientData(SWIGTYPE_p_CompleteIsoView, (void *) &cCompleteIsoView);
    rb_define_alloc_func(cCompleteIsoView.klass, _wrap_CompleteIsoView_allocate);
    rb_define_method(cCompleteIsoView.klass, "initialize", VALUEFUNC(_wrap_new_CompleteIsoView), -1);
    rb_define_method(cCompleteIsoView.klass, "getHero", VALUEFUNC(_wrap_CompleteIsoView_getHero), -1);
    rb_define_method(cCompleteIsoView.klass, "eventDragBy", VALUEFUNC(_wrap_CompleteIsoView_eventDragBy), -1);
    rb_define_method(cCompleteIsoView.klass, "eventMouseClick", VALUEFUNC(_wrap_CompleteIsoView_eventMouseClick), -1);
    rb_define_method(cCompleteIsoView.klass, "isMyHero", VALUEFUNC(_wrap_CompleteIsoView_isMyHero), -1);
    cCompleteIsoView.mark = 0;
    cCompleteIsoView.destroy = (void (*)(void *)) free_CompleteIsoView;
    rb_define_module_function(mLibantargis, "disown_EditIsoView", VALUEFUNC(_wrap_disown_EditIsoView), -1);
    
    cEditIsoView.klass = rb_define_class_under(mLibantargis, "EditIsoView", ((swig_class *) SWIGTYPE_p_CompleteIsoView->clientdata)->klass);
    SWIG_TypeClientData(SWIGTYPE_p_EditIsoView, (void *) &cEditIsoView);
    rb_define_alloc_func(cEditIsoView.klass, _wrap_EditIsoView_allocate);
    rb_define_method(cEditIsoView.klass, "initialize", VALUEFUNC(_wrap_new_EditIsoView), -1);
    rb_define_method(cEditIsoView.klass, "toggleEdit", VALUEFUNC(_wrap_EditIsoView_toggleEdit), -1);
    rb_define_method(cEditIsoView.klass, "selectSize", VALUEFUNC(_wrap_EditIsoView_selectSize), -1);
    rb_define_method(cEditIsoView.klass, "setAll", VALUEFUNC(_wrap_EditIsoView_setAll), -1);
    rb_define_method(cEditIsoView.klass, "addEntity", VALUEFUNC(_wrap_EditIsoView_addEntity), -1);
    rb_define_method(cEditIsoView.klass, "setRubber", VALUEFUNC(_wrap_EditIsoView_setRubber), -1);
    rb_define_method(cEditIsoView.klass, "togglePoints", VALUEFUNC(_wrap_EditIsoView_togglePoints), -1);
    rb_define_method(cEditIsoView.klass, "eventDragBy", VALUEFUNC(_wrap_EditIsoView_eventDragBy), -1);
    rb_define_method(cEditIsoView.klass, "eventMouseClick", VALUEFUNC(_wrap_EditIsoView_eventMouseClick), -1);
    rb_define_method(cEditIsoView.klass, "getClosest", VALUEFUNC(_wrap_EditIsoView_getClosest), -1);
    rb_define_method(cEditIsoView.klass, "toggleShowPoints", VALUEFUNC(_wrap_EditIsoView_toggleShowPoints), -1);
    rb_define_method(cEditIsoView.klass, "eventMouseMotion", VALUEFUNC(_wrap_EditIsoView_eventMouseMotion), -1);
    rb_define_method(cEditIsoView.klass, "editAt", VALUEFUNC(_wrap_EditIsoView_editAt), -1);
    rb_define_method(cEditIsoView.klass, "sigMapEdited=", VALUEFUNC(_wrap_EditIsoView_sigMapEdited_set), -1);
    rb_define_method(cEditIsoView.klass, "sigMapEdited", VALUEFUNC(_wrap_EditIsoView_sigMapEdited_get), -1);
    cEditIsoView.mark = 0;
    cEditIsoView.destroy = (void (*)(void *)) free_EditIsoView;
    rb_define_module_function(mLibantargis, "toEditIsoView", VALUEFUNC(_wrap_toEditIsoView), -1);
}


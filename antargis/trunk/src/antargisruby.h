/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Libantargis_WRAP_H_
#define SWIG_Libantargis_WRAP_H_

class Swig::Director;


class SwigDirector_AGSurface : public AGSurface, public Swig::Director {

public:
    SwigDirector_AGSurface(VALUE self);
    SwigDirector_AGSurface(VALUE self, int w, int h);
    SwigDirector_AGSurface(VALUE self, AGSurface const &p);
    virtual ~SwigDirector_AGSurface();
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
};


class SwigDirector_AGScreen : public AGScreen, public Swig::Director {

public:
    SwigDirector_AGScreen(VALUE self);
    virtual size_t getWidth() const;
    virtual size_t getHeight() const;
    virtual void flip();
    virtual void begin();
};


class SwigDirector_AGSDLScreen : public AGSDLScreen, public Swig::Director {

public:
    SwigDirector_AGSDLScreen(VALUE self, SDL_Surface *s);
    virtual void tile(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual AGSurface loadSurface(std::string const &pFilename);
    virtual void tile(AGTexture const &pSource);
    virtual void drawGradient(AGRect const &rect, AGColor const &ul, AGColor const &ur, AGColor const &dl, AGColor const &dr);
    virtual void drawGradientAlpha(AGRect const &rect, AGColor const &ul, AGColor const &ur, AGColor const &dl, AGColor const &dr);
    virtual void renderText(AGRect const &pClipRect, int BaseLineX, int BaseLineY, std::string const &pText, AGFont const &ParamIn);
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual size_t getWidth() const;
    virtual size_t getHeight() const;
    virtual void tile(AGTexture const &pSource, AGRect const &pDest);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest);
    virtual void begin();
    virtual void drawRect(AGRect const &pRect, AGColor const &c);
    virtual void flip();
    virtual void drawBorder(AGRect const &rect, int W, AGColor const &c1, AGColor const &c2);
    virtual void putPixel(int x, int y, AGColor const &c);
    virtual SDL_Surface *newSurface(int x, int y);
};


class SwigDirector_AGEvent : public AGEvent, public Swig::Director {

public:
    SwigDirector_AGEvent(VALUE self, AGListener *pCaller);
    virtual ~SwigDirector_AGEvent();
};


class SwigDirector_AGSDLEvent : public AGSDLEvent, public Swig::Director {

public:
    SwigDirector_AGSDLEvent(VALUE self, AGListener *pCaller, SDL_Event const *pEvent);
    virtual ~SwigDirector_AGSDLEvent();
};


class SwigDirector_AGMouseEvent : public AGMouseEvent, public Swig::Director {

public:
    SwigDirector_AGMouseEvent(VALUE self, AGListener *pCaller, SDL_Event *pEvent);
    virtual ~SwigDirector_AGMouseEvent();
};


class SwigDirector_AGListener : public AGListener, public Swig::Director {

public:
    SwigDirector_AGListener(VALUE self);
    virtual ~SwigDirector_AGListener();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
};


class SwigDirector_AGCPPListener : public AGCPPListener, public Swig::Director {

public:
    SwigDirector_AGCPPListener(VALUE self);
    virtual ~SwigDirector_AGCPPListener();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller) const;
};


class SwigDirector_AGSignal : public AGSignal, public Swig::Director {

public:
    SwigDirector_AGSignal(VALUE self);
    SwigDirector_AGSignal(VALUE self, AGMessageObject *pCaller);
    SwigDirector_AGSignal(VALUE self, AGMessageObject *pCaller, std::string const &pName);
    virtual ~SwigDirector_AGSignal();
};


class SwigDirector_AGMessageObject : public AGMessageObject, public Swig::Director {

public:
    SwigDirector_AGMessageObject(VALUE self);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventActive(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual ~SwigDirector_AGMessageObject();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
};


class SwigDirector_AGWidget : public AGWidget, public Swig::Director {

public:
    SwigDirector_AGWidget(VALUE self, AGWidget *pParent, AGRect const &r);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGWidget();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGButton : public AGButton, public Swig::Director {

public:
    SwigDirector_AGButton(VALUE self, AGWidget *pParent, AGRect const &r, std::string const &pText, int id = -1);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGButton();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGApplication : public AGApplication, public Swig::Director {

public:
    SwigDirector_AGApplication(VALUE self);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventActive(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m2);
    virtual bool eventFrame(float pTime);
    virtual bool eventFrameEnd(float pTime);
    virtual void eventChangedRes();
    virtual ~SwigDirector_AGApplication();
    virtual bool eventIdle();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void draw();
};


class SwigDirector_AGText : public AGText, public Swig::Director {

public:
    SwigDirector_AGText(VALUE self, AGWidget *pParent, AGRect const &pRect, std::string const &pText, AGFont const &pFont);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGText();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGVTiler : public AGVTiler, public Swig::Director {

public:
    SwigDirector_AGVTiler(VALUE self, AGWidget *pParent, AGRect const &pRect, bool pAdaptMyHeight = true);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual void rePosition();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGVTiler();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
};


class SwigDirector_AGHTiler : public AGHTiler, public Swig::Director {

public:
    SwigDirector_AGHTiler(VALUE self, AGWidget *pParent, AGRect const &pRect, bool pAdaptMyHeight = true);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual void rePosition();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGHTiler();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
};


class SwigDirector_AGTheme : public AGTheme, public Swig::Director {

public:
    SwigDirector_AGTheme(VALUE self);
    virtual ~SwigDirector_AGTheme();
};


class SwigDirector_AGMenuEvent : public AGMenuEvent, public Swig::Director {

public:
    SwigDirector_AGMenuEvent(VALUE self, AGListener *pListener, std::string const &pName);
    virtual ~SwigDirector_AGMenuEvent();
};


class SwigDirector_AGMenu : public AGMenu, public Swig::Director {

public:
    SwigDirector_AGMenu(VALUE self, AGWidget *pParent, AGPoint pWishPos, std::string const &pName);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual void rePosition();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGMenu();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *pWidget);
};


class SwigDirector_AGScreenWidget : public AGScreenWidget, public Swig::Director {

public:
    SwigDirector_AGScreenWidget(VALUE self);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual ~SwigDirector_AGScreenWidget();
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGEditLine : public AGEditLine, public Swig::Director {

public:
    SwigDirector_AGEditLine(VALUE self, std::string const &pText, AGFont pFont, bool pHardEnd);
    virtual ~SwigDirector_AGEditLine();
    virtual void drawCursor(AGPainter &p, int cx, AGPoint const &pPoint, AGRect const &pClip, AGColor const &c);
    virtual void draw(AGPainter &p, AGPoint const &pPoint, AGRect const &pClip);
};


class SwigDirector_AGEdit : public AGEdit, public Swig::Director {

public:
    SwigDirector_AGEdit(VALUE self, AGWidget *pParent, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGEdit();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void drawBackground(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGCheckBox : public AGCheckBox, public Swig::Director {

public:
    SwigDirector_AGCheckBox(VALUE self, AGWidget *pParent, AGRect pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGCheckBox();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGRadioGroup : public AGRadioGroup, public Swig::Director {

public:
    SwigDirector_AGRadioGroup(VALUE self, AGWidget *pParent, AGRect const &pr);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual void eventChange(std::string const &p);
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual ~SwigDirector_AGRadioGroup();
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGRadio : public AGRadio, public Swig::Director {

public:
    SwigDirector_AGRadio(VALUE self, AGWidget *pParent, AGRect pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual std::string getCaption() const;
    virtual bool canFocus() const;
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual ~SwigDirector_AGRadio();
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual bool eventHide();
    virtual bool eventMouseLeave();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGTable : public AGTable, public Swig::Director {

public:
    SwigDirector_AGTable(VALUE self, AGWidget *pWidget, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual ~SwigDirector_AGTable();
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGWindow : public AGWindow, public Swig::Director {

public:
    SwigDirector_AGWindow(VALUE self, AGWidget *pWidget, AGRect const &pRect, std::string const &pTitle = "");
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGWindow();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void setWidth(int w);
    virtual void setHeight(int w);
    virtual void addChildBack(AGWidget *w);
    virtual void removeChild(AGWidget *w);
    virtual void addChild(AGWidget *w);
};


class SwigDirector_AGImage : public AGImage, public Swig::Director {

public:
    SwigDirector_AGImage(VALUE self, AGWidget *pParent, AGPoint const &p, AGSurface pSurface, bool pTile, AGRect const &pRect = AGRect(0,0,0,0));
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual ~SwigDirector_AGImage();
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGCaption : public AGCaption, public Swig::Director {

public:
    SwigDirector_AGCaption(VALUE self, AGWidget *pParent, AGRect const &pRect, std::string const &pText, AGFont const &pFont, AGBackground const &pBG);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGCaption();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGLayout : public AGLayout, public Swig::Director {

public:
    SwigDirector_AGLayout(VALUE self, AGWidget *pgParent, std::string const &pXMLData);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGLayout();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGLayoutCreator : public AGLayoutCreator, public Swig::Director {

public:
    SwigDirector_AGLayoutCreator(VALUE self, std::string const &pName);
    virtual ~SwigDirector_AGLayoutCreator();
    virtual AGWidget *create(AGWidget *pParent, AGRect const &pRect, xmlpp::Node const &pNode);
};


class SwigDirector_Parser : public Parser, public Swig::Director {

public:
    SwigDirector_Parser(VALUE self);
    virtual void simpleTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual ~SwigDirector_Parser();
    virtual void startTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual void endTag(std::string const &pName);
    virtual void text(std::string const &pText);
    virtual void comment(std::string const &pText);
    virtual void header(std::string const &pText);
};


class SwigDirector_DomParser : public DomParser, public Swig::Director {

public:
    SwigDirector_DomParser(VALUE self);
    virtual void simpleTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual ~SwigDirector_DomParser();
    virtual void startTag(std::string const &pName, Node::Attributes const &pAttributes);
    virtual void endTag(std::string const &pName);
    virtual void text(std::string const &pText);
    virtual void comment(std::string const &pText);
    virtual void header(std::string const &pText);
};


class SwigDirector_AGSound : public AGSound, public Swig::Director {

public:
    SwigDirector_AGSound(VALUE self);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGSound();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGGLWidget : public AGGLWidget, public Swig::Director {

public:
    SwigDirector_AGGLWidget(VALUE self, AGWidget *pParent, AGRect const &r);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGGLWidget();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawGL();
    virtual void draw(AGPainter &p);
    virtual void drawAll(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGColorButton : public AGColorButton, public Swig::Director {

public:
    SwigDirector_AGColorButton(VALUE self, AGWidget *pParent, AGRect const &r, int x, int y);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGColorButton();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGDialog : public AGDialog, public Swig::Director {

public:
    SwigDirector_AGDialog(VALUE self, AGWidget *pgParent, std::string const &pXMLData);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual bool eventClose(std::string const &pName, AGEvent const *event, AGMessageObject *pCaller);
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGDialog();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual bool eventCancel(std::string const &pName, AGEvent const *event, AGMessageObject *pCaller);
    virtual bool eventOk(std::string const &pName, AGEvent const *event, AGMessageObject *pCaller);
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGListBox : public AGListBox, public Swig::Director {

public:
    SwigDirector_AGListBox(VALUE self, AGWidget *pParent, AGRect const &pRect);
    virtual bool eventLostFocus();
    virtual bool eventGotFocus();
    virtual bool eventShow();
    virtual int minHeight() const;
    virtual int minWidth() const;
    virtual bool canFocus() const;
    virtual ~SwigDirector_AGListBox();
    virtual bool eventDragBy(AGEvent const *event, AGPoint const &pDiff);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventActive(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventMouseClick(AGEvent const *m);
    virtual bool eventMouseEnter();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void drawAll(AGPainter &p);
    virtual void draw(AGPainter &p);
    virtual void setLeft(int x);
    virtual void setTop(int y);
    virtual void setHeight(int w);
    virtual void setWidth(int w);
    virtual bool eventMouseLeave();
    virtual bool eventHide();
    virtual void addChildBack(AGWidget *w);
    virtual void addChild(AGWidget *w);
    virtual void removeChild(AGWidget *w);
};


class SwigDirector_AGPainter : public AGPainter, public Swig::Director {

public:
    SwigDirector_AGPainter(VALUE self);
    SwigDirector_AGPainter(VALUE self, AGPainter const &p);
    SwigDirector_AGPainter(VALUE self, AGPaintTarget &pTarget);
    virtual void tile(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc, AGColor const &pColor);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest, AGColor const &pColor);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void tile(AGSurface const &pSource, AGRect const &pDest, AGRect const &pSrc);
    virtual void tile(AGTexture const &pSource);
    virtual void drawCircle(AGPoint const &p, float rad, AGColor const &c);
    virtual ~SwigDirector_AGPainter();
    virtual void drawLine(AGPoint const &p0, AGPoint const &p1, AGColor const &c);
    virtual void blit(AGSurface const &pSource, AGRect const &pDest);
    virtual void tile(AGTexture const &pSource, AGRect const &pDest);
    virtual void blit(AGTexture const &pSource, AGRect const &pDest);
    virtual void tile(AGSurface const &pSource, AGRect const &pDest);
    virtual void blit(AGTexture const &pSource, AGRect2 const &pDest, AGRect2 const &pSrc);
    virtual void tile(AGSurface const &pSource);
    virtual void putPixel(AGPoint const &p, AGColor const &c);
    virtual void drawRect(AGRect const &pRect, AGColor const &c);
    virtual void blitTri(AGTexture const &pSource, AGTriangle2 const &pSrc, AGTriangle2 const &pDest);
};


class SwigDirector_HeightMap : public HeightMap, public Swig::Director {

public:
    SwigDirector_HeightMap(VALUE self, int w, int h);
    virtual void mapChanged();
    virtual ~SwigDirector_HeightMap();
    virtual void saveXML(Node &node) const;
    virtual void loadXML(Node const &node);
};


class SwigDirector_AntMap : public AntMap, public Swig::Director {

public:
    SwigDirector_AntMap(VALUE self, int w, int h);
    virtual void insertEntity(AntEntity *e);
    virtual void removeEntity(AntEntity *p);
    virtual void entsChanged();
    virtual void mapChanged();
    virtual ~SwigDirector_AntMap();
    virtual AntEntity *loadEntity(xmlpp::Node const &node);
    virtual void saveXML(xmlpp::Node &node) const;
    virtual void loadXML(xmlpp::Node const &node);
};


class SwigDirector_SceneNode : public SceneNode, public Swig::Director {

public:
    SwigDirector_SceneNode(VALUE self);
    virtual void advance(float time);
    virtual size_t getTriangles() const;
    virtual void mapChanged();
    virtual ~SwigDirector_SceneNode();
    virtual void drawDepth();
    virtual void sort(AGVector4 const &pCamera);
    virtual void drawShadow();
    virtual void draw();
};


class SwigDirector_MeshData : public MeshData, public Swig::Director {

public:
    SwigDirector_MeshData(VALUE self, std::string const &filename, float zoom, std::string const &pTexture = "", bool pShadow = true);
    virtual void advance(float time);
    virtual void mapChanged();
    virtual size_t getTriangles() const;
    virtual ~SwigDirector_MeshData();
    virtual void sort(AGVector4 const &pCamera);
    virtual void drawDepth();
    virtual void draw();
    virtual void drawShadow();
};


class SwigDirector_Mesh : public Mesh, public Swig::Director {

public:
    SwigDirector_Mesh(VALUE self, MeshData &data, AGVector4 const &pPos, float pRot);
    virtual void advance(float time);
    virtual void mapChanged();
    virtual size_t getTriangles() const;
    virtual ~SwigDirector_Mesh();
    virtual void sort(AGVector4 const &pCamera);
    virtual void drawDepth();
    virtual void draw();
    virtual void drawShadow();
};


class SwigDirector_GLApp : public GLApp, public Swig::Director {

public:
    SwigDirector_GLApp(VALUE self, int w, int h);
    virtual bool eventResize(AGEvent const *m);
    virtual bool eventSysWM(AGEvent const *m);
    virtual bool eventQuitModal(AGEvent const *m);
    virtual bool eventKeyUp(AGEvent const *m);
    virtual bool eventActive(AGEvent const *m);
    virtual bool acceptEvent(SDL_Event const *pEvent);
    virtual bool eventQuit(AGEvent const *m);
    virtual bool eventMouseButtonDown(AGEvent const *m);
    virtual bool eventMouseButtonUp(AGEvent const *m);
    virtual bool eventMouseMotion(AGEvent const *m);
    virtual bool eventKeyDown(AGEvent const *m);
    virtual bool eventFrameEnd(float pTime);
    virtual bool eventFrame(float t);
    virtual void eventChangedRes();
    virtual void eventClick(Scene::PickResult const &pNodes, int button);
    virtual ~SwigDirector_GLApp();
    virtual bool eventIdle();
    virtual bool signal(std::string const &pName, AGEvent const *m, AGMessageObject *pCaller);
    virtual void draw();
};


class SwigDirector_AntEntity : public AntEntity, public Swig::Director {

public:
    SwigDirector_AntEntity(VALUE self);
    SwigDirector_AntEntity(VALUE self, AGVector3 const &p);
    SwigDirector_AntEntity(VALUE self, AGVector2 const &p);
    virtual void move(float pTime);
    virtual void eventGotNewJob();
    virtual void eventNoJob();
    virtual void newFetchJob(int p, AGVector2 &pTarget, std::string const &pWhat);
    virtual ~SwigDirector_AntEntity();
    virtual void newMoveJob(int p, AGVector2 const &pTarget, int pnear = 0);
    virtual std::string xmlName() const;
    virtual std::string getTexture() const;
    virtual void eventJobFinished();
    virtual void eventDefeated();
    virtual void eventDie();
    virtual void loadXML(xmlpp::Node const &node);
    virtual void saveXML(xmlpp::Node &node) const;
    virtual void eventGotFight(AntEntity *pOther);
    virtual void newFightJob(int p, AntEntity *target);
    virtual void setPos(AGVector2 const &p);
    virtual void newRestJob(int pTime);
};


class SwigDirector_TerrainPieceVA : public TerrainPieceVA, public Swig::Director {

public:
    SwigDirector_TerrainPieceVA(VALUE self, HeightMap &map, int x, int y, int w, int h, AGVector4 const &pPos);
    virtual void advance(float time);
    virtual size_t getTriangles() const;
    virtual void mapChanged();
    virtual ~SwigDirector_TerrainPieceVA();
    virtual void sort(AGVector4 const &pCamera);
    virtual void drawDepth();
    virtual void draw();
    virtual void drawShadow();
};


class SwigDirector_TerrainMesh : public TerrainMesh, public Swig::Director {

public:
    SwigDirector_TerrainMesh(VALUE self, HeightMap &map);
    virtual void advance(float t);
    virtual size_t getTriangles() const;
    virtual void mapChanged();
    virtual ~SwigDirector_TerrainMesh();
    virtual void drawDepth();
    virtual void sort(AGVector4 const &camera);
    virtual void draw();
    virtual void drawShadow();
};


#endif

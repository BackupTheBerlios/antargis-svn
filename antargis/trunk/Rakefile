#!/usr/bin/env ruby

require 'rake'
require 'mkmf'
require 'ftools'

require 'buildtools.rb'

$LDFLAGS+=" -L/usr/X11R6/lib "
$CFLAGS+=" -I/usr/X11R6/include "

version="0.1.3"

$profile=true
#$debug=true

def getDestDir
	d="/usr"
	ARGV.each{|l|
		if l=~/DESTDIR=/
			d=l.sub("DESTDIR=","")
		end
	}
	puts "DestDir:"+d
	return d
end


windows # check once

if File.exists?("config.rb")
	puts "Config cached! - remove 'config.rb' or 'rake allclean' to clear cache"
	puts
	require "config.rb"
else
  msh "./configure"
	require "config.rb"
end

begin File.mkpath(".deps")
rescue 
end


interfaceHeadersSRC=["ant_frustum.h","ant_projection.h","ant_camera.h",
"scenenode.h","anim_mesh.h","anim_mesh_data.h","ant_app.h","entity.h","entptr.h","glsl.h","height_map.h","map.h","mesh_data.h","mesh.h","mesh_optimizer.h","minimap.h","new_decal.h","ant_renderer.h","resource.h","scene.h","smoke.h","terrain.h","vertex_array.h","water.h"]
interfaceHeadersGUI=[
"ag_rubyobj.h","ag_messageobject.h","ag_serial.h",
 "ag_geometry.h","ag_font.h","ag_color.h","ag_local.h","ag_config.h",
 "ag_widget.h","ag_colorbutton.h","ag_glwidget.h","ag_xml.h","ag_layout.h","ag_dialog.h","ag_mutex.h",
 "ag_application.h","ag_background.h","ag_border.h","ag_button.h","ag_text.h","ag_caption.h","ag_checkbox.h","ag_combo.h","ag_edit.h","ag_fontengine.h","ag_fs.h","ag_painttarget.h","ag_surface.h","ag_texture.h","ag_surfacemanager.h","ag_image.h","ag_layoutfactory.h","ag_listbox.h","ag_list.h","ag_main.h","ag_menu.h","ag_menuitem.h","ag_mixer.h","ag_mutex.h","ag_painter.h","ag_png.h","ag_radio.h","ag_screen.h","ag_table.h","ag_texturecache.h","ag_theme.h","ag_tools.h","ag_window.h","ag_xml.h","ag_screenwidget.h","ag_scroller.h"]

#ADD_PATCH


interfaceHeadersSRC.collect!{|s|"src/"+s}
interfaceHeadersGUI.collect!{|s|"gui/src/"+s}




PWD=Dir.pwd

task :default => ["libantargis.so"]

$GUISRC="gui/src"
if $ccache!=""
	$ccache+=" "
end

$CFLAGS=""
#puts "CFLAGS:#{$CFLAGS}"

if $xcompile
	$CXX=$ccache+"i586-mingw32msvc-g++"
	$CC=$ccache+"i586-mingw32msvc-gcc"
	CC=$CC
	$AR="i586-mingw32msvc-ar"
	$RANLIB="i586-mingw32msvc-ranlib"
else
	$CXX=$ccache+"g++"
	$CC=$ccache+"gcc"
	$AR="ar"
	$RANLIB="ranlib"
end

$INCLUDEDIRS=""
if $xcompile
	$CFLAGS+=`./contrib/usr/bin/sdl-config --cflags`.chomp
	$INCLUDEDIRS+=`./contrib/usr/bin/sdl-config --cflags`.chomp
	$LDFLAGS+=`./contrib/usr/bin/sdl-config --libs`.chomp+" "+$libs
elsif not windows
	# standard way (unix)
	$CFLAGS+=`sdl-config --cflags`.chomp
	$INCLUDEDIRS+=`sdl-config --cflags`.chomp
	$LDFLAGS+=`sdl-config --libs`.chomp+" "+$libs
	$CFLAGS+=" -fPIC"
else
	# (godrin's win-box)
	$CFLAGS="-Ic:/msys/local/include/SDL -Ic:/msys/local/include -Dmain=SDL_main"
	$LDFLAGS="-s -Wl,--enable-auto-import,--export-all "
	$LDFLAGS+=" -Lc:/msys/local/lib -lmingw32 -lSDLmain -lSDL -mwindows "+$libs
end

if $xcompile
	rubyincludedir="contrib/usr/lib/ruby/1.8/i386-mingw32msvc/ -Icontrib/usr/include"
else
	rubyincludedir=Config::CONFIG['archdir']
end

$CFLAGS+=" -Isrc -I"+$GUISRC+" -DUSE_RUBY -I"+rubyincludedir+" -Wall"

if $debug
	$CFLAGS+=" -g -O0"
else
	$CFLAGS+=" -DMNDEBUG -O2"
end
if $profile
	$CFLAGS+=" -DMPROFILE"
end
if $gcdebug
	$CFLAGS+=" -DGCDEBUG"
end

$LDSHARED="#{$CXX} -shared"
$INSTALL_PROG=$INSTALL+" -m 755 -D "
$INSTALL_DATA=$INSTALL+" -m 644 -D "

interfaceHeaders = interfaceHeadersGUI + interfaceHeadersSRC

SRCS=(Dir[$GUISRC+"/*.cc"]+Dir[$GUISRC+"/*.c"]+Dir["src/*.cc"]+["src/swig.cc","gui/src/guiswig.cc"]).uniq
OBJS=[]
O2S={}
SRCS.each{|s|
	o=s.gsub(".cc",".o").gsub(".c",".o")
	OBJS<<o
	O2S[o]=s
}

ANT_OBJS=OBJS-["gui/src/guiswig.o"]

GUI_OBJS=OBJS.select{|o|o=~/gui/}

file "libantargis.so" => ANT_OBJS do |t|
	msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{ANT_OBJS.join(" ")} "+$libs
end

file "libantargisgui.so" => GUI_OBJS do |t|
	msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{GUI_OBJS.join(" ")} "+$libs
end

file "libantargisgui.a" => GUI_OBJS do |t|
	msh "#{$AR} rc #{t.name} #{GUI_OBJS.join(" ")} "
	msh "#{$RANLIB} #{t.name}"
end

# manage dependencies


if $swig!=""
	myInterfaces=interfaceHeaders+["src/interface.i"]
	file ["src/swig.cc"] => ["src/nantmarker.hh"]+myInterfaces do |t|
		msh "cd src; swig -v -Wall -ruby -c++ #{$INCLUDEDIRS}-I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o swig.cc interface.i 2>&1"
	end
	
	file ["src/nantmarker.hh"] => myInterfaces do |t|
		msh "cd src; ../#{$GUISRC}/createmarker.rb "+interfaceHeaders.collect{|h|"../"+h}.join(" ")
	end

	# libantargisgui
	myInterfaces=interfaceHeadersGUI+["gui/src/interface.i"]
	file ["gui/src/guiswig.cc"] => ["gui/src/nantmarker.hh"]+myInterfaces do |t|
		msh "cd gui/src; swig -v -Wall -ruby -c++ #{$INCLUDEDIRS}-I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o guiswig.cc interface.i 2>&1"
	end
	
	file ["gui/src/nantmarker.hh"] => myInterfaces do |t|
		msh "cd gui/src; ./createmarker.rb "+interfaceHeadersGUI.collect{|h|"../../"+h}.join(" ")
	end
end


SRCS.each{|s|
	dep=".deps/"+s.gsub(/.*\//,"")
	if File.exists?(dep)
		deps=File.open(dep).read.gsub('\\','').gsub(/.*:/,"").split(" ").collect{|d|d.gsub(PWD+"/","")}
	else
		deps=[s]
	end
	if windows
		deps=deps.select{|x|(not x=~/glgl/)}
	end
	if s=~/.cc/
		o=s.gsub(".cc",".o")
		file [o] => deps do |f|
			msh "#{$CXX} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	else
		o=s.gsub(".c",".o")
		file [o] => deps do |f|
			msh "#{$CC} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	end
}

task :test => "libantargis.so" do |t|
	if (not $xcompile)
		`ruby ruby/runtests.rb`
	end
	#require 'libantargis.so'
end

task :clean do
	msh "rm -rf clean.rb"
	["src",$GUISRC].each{|dir|
		["*.o","*.oo"].each{|ext|
			msh "rm -rf #{dir}/#{ext}"
		}
	}
	if $swig!=""
		msh "rm -rf src/swig.* gui/src/guiswig.* gui/src/swig.*"
		msh "rm -rf src/nantmarker.hh"
		msh "rm -rf gui/src/nantmarker.hh"
	end
	msh "rm -rf .deps"
	msh "rm -rf docs/api"
	msh "rm -rf docs/ruby"
	msh "rm -rf libantargis.so"
	msh "rm -rf libantargisgui.so libantargisgui.a"
end

task :smallclean do
	if $swig!=""
		msh "rm -rf src/swig.*"
		msh "rm -rf src/nantmarker.hh"
	end
end

task :allclean => [:clean] do
	rm_rf "config.rb"
end

def mkdir(d)
	begin
		#puts "mkdir:#{d}"
		Dir.mkdir(d) #sh "test -e #{d} || mkdir #{d}"
	rescue
		#puts "failed"
	end
end
def cpdir(dir,distdir)
	mkdir(distdir+"/"+dir)
	Dir[dir+"/*"].each{|f|
		if (f=~/~/ or f=~/\.o$/ or f=~/\.a$/ or f=~/\.bak/ or f=~/\.xcf/ or f=~/\.svg/ or f=~/\.tar\.gz/ or f=~/antargis-.*/ or f=~/\.iss/ or f=~/vlog\.txt/) and not f=~/\.ogg/
		elsif f=~/\.so/ and not windows
		elsif f=~/Antargis.*package/ or f=~/autopackage/
		elsif File.ftype(f)=="file"
			File.cp(f,"#{distdir}/#{f}")
		end
	}
end

task :install => "libantargis.so" do
	begin
		destdir=getDestDir
		bindir=destdir+"/bin"
		sharedir=destdir+"/share/antargis"
		#copy everything to sharedir

		md=""
		destdir.split("/").each{|d|
			md+="/"+d
			begin
				#puts "try #{md}"
				Dir.mkdir(md)
			rescue
				#puts "muh"
			end
		}

		mkdir(bindir)
		mkdir(destdir+"/share")
		mkdir(sharedir)
		
		dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
		dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
		dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/)}
	
		dirs.each{|dir|
			cpdir(dir,sharedir)
		}
		# cp base dir
		cpdir(".",sharedir)

		File.cp("libantargis.so",sharedir+"/libantargis.so")
		f=File.open(bindir+"/antargis","w")
		f.puts('#!/bin/sh
		if test "`echo "$0"|sed -e "s/\/.*//"`" == "" ; then
			d=`dirname $0`
		else
			d=`dirname $(pwd)/$0`
		fi
		p=$(dirname $d)
		s=$(echo "$p/share/antargis")
		c=$(pwd)
		cd $s
		/usr/bin/env ruby run.rb
		cd $c
')
		f.close
		`chmod 755 #{bindir}/antargis`

	rescue
		puts "-----------------------------------------"
		puts "PROBLEM: maybe you have to get root ?"
		puts "-----------------------------------------"
		raise
	end
end


task :dist => :test do
	distdir="antargis-#{version}"
	msh "rm -rf #{distdir}"
	mkdir(distdir)
	#sh "test -e #{distdir} || mkdir #{distdir}"
	dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
	dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
	dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/) && (not x=~/contrib/) && x!="autopackage"}

	dirs.each{|dir|
		cpdir(dir,distdir)
	}
	# cp base dir
	cpdir(".",distdir)

	if false
		# FIXME: check if png is transparent first
		puts "CONVERTING PNGs to JPGs"
		# make jpgs
		pngs=`find #{distdir} -name "*.png"`
		pngs.split("\n").each{|p|
			n=p.gsub("png","jpg")
			x=`convert #{p} #{n} && rm #{p}`
		}
	end

	if $xcompile
		# copy dlls
		Dir["contrib/usr/bin/*.dll"].each{|f|
			msh "cp #{f} #{distdir}"
		}
		msh "cp libantargis.so #{distdir}"
		msh "rm -rf #{distdir}/autopackage #{distdir}/contrib #{distdir}/mkmf.log"
	
		# FIXME: maybe del this
		msh "cp #{distdir}/libpng13.dll #{distdir}/libpng12.dll"
		msh "cp #{distdir}/libtiff3.dll #{distdir}/tiff.dll"
	end
	

	# tar.gz
	if $xcompile
		msh "zip -r #{distdir}.zip #{distdir}"
	elsif not windows
		msh "rm -rf #{distdir}/config.rb"
		msh "tar cfz #{distdir}.tar.gz #{distdir}"
		msh "rm -rf #{distdir}"
	end

end

task :doc do
	puts "running doxygen"
	`doxygen Doxyfile`
	`rdoc --op docs/ruby --exclude "(.cc|.c|skat|test\/)"`
end

#!/usr/bin/env ruby

require 'rake'
require 'mkmf'
#require 'file'
require 'ftools'

begin File.mkpath(".deps")
rescue 
end

#`mkdir .deps`

def windows
	if $windows==nil
		$windows=have_library("opengl32")
		puts "no opengl32 found - so expecting _not_ to use windows"
	end
	return $windows
end

if File.exists?("config.rb")
	puts "Config cached! - remove 'config.rb' or 'rake clean' to clear cache"
	puts
	require "config.rb"
else
	have_library('SDL')
	have_library('SDL_ttf')
	have_library('SGE')
	if windows
		have_library('GLU32')
	else
		have_library("GLU")
		have_library("GL")
	end
	have_library('physfs')
	have_library('SDL_mixer')
	have_library('SDL_image')
	have_library('stdc++')
	have_library('z')
	have_library('png')
	
	$swig = with_config('swig', 'swig')
	$INSTALL = with_config('install', 'install')
	$ccache = with_config("ccache","ccache")
	
	if not $libs
		puts "ERROR: Not compatible with current mkmf!"
		exit
	end
	f=File.open("config.rb","w")
	f.puts "$libs='#{$libs}'"
	f.puts "$swig='#{$swig}'"
	f.puts "$INSTALL='#{$INSTALL}'"
	f.puts "$ccache='#{$ccache}'"
	f.close
	
end
interfaceHeadersSRC=[
"scenenode.h","anim_mesh.h","anim_mesh_data.h","antapp.h","ant_serial.h","entity.h","entptr.h","glsl.h","height_map.h","map.h","mesh_data.h","mesh.h","mesh_optimizer.h","minimap.h","new_decal.h","renderer.h","resource.h","scene.h","smoke.h","terrain.h","vertex_array.h","water.h"]
interfaceHeadersGUI=[
"ag_rubyobj.h","ag_messageobject.h",
 "ag_geometry.h","ag_font.h","ag_color.h",
 "ag_widget.h","ag_colorbutton.h","ag_glwidget.h","ag_xml.h","ag_layout.h","ag_dialog.h","ag_mutex.h",
 "ag_application.h","ag_background.h","ag_border.h","ag_button.h","ag_text.h","ag_caption.h","ag_checkbox.h","ag_combo.h","ag_edit.h","ag_fontengine.h","ag_fs.h","ag_painttarget.h","ag_surface.h","ag_texture.h","ag_surfacemanager.h","ag_image.h","ag_layoutfactory.h","ag_vtiler.h","ag_listbox.h","ag_list.h","ag_main.h","ag_menu.h","ag_menuitem.h","ag_mixer.h","ag_mutex.h","ag_painter.h","ag_png.h","ag_radio.h","ag_screen.h","ag_table.h","ag_texturecache.h","ag_theme.h","ag_tools.h","ag_window.h","ag_xml.h"]
 

PWD=Dir.pwd

task :default => ["libantargis.so",:test]

$GUISRC="gui/src"
$CXX=$ccache+" g++"
$CC=$ccache+" gcc"
$CFLAGS=`sdl-config --cflags`.chomp+" -Isrc -I"+$GUISRC+" -DUSE_RUBY -g -O0 -I"+Config::CONFIG['archdir']+" -fPIC -Wall"
$LDSHARED="#{$CXX} -shared"
$LDFLAGS=`sdl-config --libs`.chomp+" "+$libs
$INSTALL_PROG=$INSTALL+" -m 755 -D "
$INSTALL_DATA=$INSTALL+" -m 644 -D "

interfaceHeaders = interfaceHeadersGUI.collect{|x|"../"+$GUISRC+"/"+x} + interfaceHeadersSRC

SRCS=(Dir[$GUISRC+"/*.cc"]+Dir[$GUISRC+"/*.c"]+(Dir["src/*.cc"]-["src/swig.cc"])+["src/swig.cc"]).uniq-[$GUISRC+"/swig.cc"]
OBJS=[]
O2S={}
SRCS.each{|s|
	o=s.gsub(".cc",".o") #.gsub(".c",".o")
	OBJS<<o
	O2S[o]=s
}

file "libantargis.so" => OBJS do |t|
	puts t
	sh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{OBJS.join(" ")}"
end

begin File.mkdir(".deps")
rescue 
end


# manage dependencies
SRCS.each{|s|
	dep=".deps/"+s.gsub(/.*\//,"")
	if File.exists?(dep)
		deps=File.open(dep).read.gsub('\\','').gsub(/.*:/,"").split(" ")
	else
		deps=[s]
	end
	if s=~/.cc/
		o=s.gsub(".cc",".o")
		file [o] => deps do |f|
                        sh "#{$CXX} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	else
		o=s.gsub(".cc",".o")
		file [o] => deps do |f|
			sh "#{$CC} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	end
}

myInterfaces=interfaceHeaders.collect{|x|"src/"+x}+["src/interface.i"]

puts myInterfaces
#exit

file ["src/swig.cc"] => ["src/nantmarker.hh"]+myInterfaces do |t|
	sh "cd src; swig -v -Wall -ruby -c++ -I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o swig.cc interface.i 2>&1"
end

file ["src/nantmarker.hh"] => myInterfaces do |t|
	sh "cd src; ../#{$GUISRC}/createmarker.rb "+interfaceHeaders.join(" ")
end

task :test => "libantargis.so" do |t|
	require 'libantargis.so'
end

task :clean do
	sh "rm -f clean.rb"
	["src",$GUISRC].each{|dir|
		["*.o","*.oo"].each{|ext|
			sh "rm -f #{dir}/#{ext}"
		}
	}
	sh "rm -f src/swig.*"
	sh "rm -f src/nantmarker.hh"
	sh "rm -f config.rb"
	sh "rm -rf .deps"
end

task :install do
	begin
		sh $INSTALL_PROG+" libantargis.so "+File.join(Config::CONFIG['sitearchdir'],"libantargis.so")
	rescue
		puts "-----------------------------------------"
		puts "PROBLEM: maybe you have to get root ?"
		puts "-----------------------------------------"
		raise
	end
end

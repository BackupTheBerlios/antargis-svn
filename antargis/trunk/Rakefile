#!/usr/bin/env ruby

require 'rake'
require 'mkmf'
#require 'file'
require 'ftools'

$LDFLAGS+=" -L/usr/X11R6/lib "
$CFLAGS+=" -I/usr/X11R6/include "

version="0.1.1"

begin File.mkpath(".deps")
rescue 
end

$debug=true

#`mkdir .deps`

def windows
	if $mwindows==nil
		$mwindows||=(have_library("opengl32"))
		if not $mwindows
			
			puts "no opengl32 found - so expecting _not_ to use windows"
		end
	end
	#puts "WINDOWS:"+$mwindows.to_s
	return $mwindows
end

def getDestDir
	d="/usr"
	ARGV.each{|l|
		if l=~/DESTDIR=/
			d=l.sub("DESTDIR=","")
		end
	}
	puts "DestDir:"+d
	return d
end

$failed_libs=[]
def test_library(x)
	if not have_library(x)
		$failed_libs.push(x)
	end
end

def test_program(p,er)
	path=ENV["PATH"]
	mp=""
	path.split(":").each{|s|
		c=s+"/"+p
		if File.exists?(c)
			mp=c
		end
	}
	if mp==""
		puts "NOTE: "+er
	else
		puts "Found #{p} at #{mp}"
	end
	#puts mp	
	#x=`whereis #{p}`
	#puts x,path
	return mp
end

#test_program("swig","Swig was not found! If you make changes on the header-files this can lead to problems.")
#exit


windows # check once

if File.exists?("config.rb")
	puts "Config cached! - remove 'config.rb' or 'rake clean' to clear cache"
	puts
	require "config.rb"
else
	if windows
		$LDFLAGS+=" -LC:/msys/local/lib"
	end
	test_library('SDL')
	test_library('SDL_ttf')
	#test_library('SGE')
	if windows
		test_library('GLU32')
	else
		test_library("GLU")
		test_library("GL")
	end
	test_library('SDL_mixer')
	test_library('SDL_image')
	test_library('stdc++')
	test_library('z')
	test_library('png')
	if windows
		test_library('msvcrt-ruby18')
	end

	if $failed_libs.length>0
		puts "----------------------------------------------------------------------"
		puts "| ERROR:"
		puts "| Following libraries failed when compiling:"
		puts "| " +$failed_libs.join(" ")
		puts "| Please install the corresponding packages and the development packages."
		puts "| On Debian this would be something like:"
		puts "| apt-get install libsdl1.2-dev libsdl-image1.2-dev libsdl-ttf1.2-dev libsdl-mixer1.2-dev ruby1.8-dev libsdl-sge-dev"
		puts "| Note: libz is the famous zlib :-)"
		puts "----------------------------------------------------------------------"
		exit
	end
	
	$swig=test_program("swig","Swig was not found! If you make changes on the header-files this can lead to problems.")
	#$swig = with_config('swig', 'swig')
	$INSTALL = test_program('install', 'Please install "install"')
	$ccache = test_program("ccache","For faster recompiling while developing you can install ccache.")
	if windows
		$ccache=""
	end
	
	if not $libs
		puts "ERROR: Not compatible with current mkmf!"
		exit
	end
	f=File.open("config.rb","w")
	f.puts "$libs='#{$libs}'"
	f.puts "$swig='#{$swig}'"
	f.puts "$INSTALL='#{$INSTALL}'"
	f.puts "$ccache='#{$ccache}'"
	f.close
	
end
interfaceHeadersSRC=["ant_frustum.h","ant_projection.h",
"scenenode.h","anim_mesh.h","anim_mesh_data.h","ant_app.h","ant_serial.h","entity.h","entptr.h","glsl.h","height_map.h","map.h","mesh_data.h","mesh.h","mesh_optimizer.h","minimap.h","new_decal.h","ant_renderer.h","resource.h","scene.h","smoke.h","terrain.h","vertex_array.h","water.h","ant_config.h"]
interfaceHeadersGUI=[
"ag_rubyobj.h","ag_messageobject.h",
 "ag_geometry.h","ag_font.h","ag_color.h","ag_local.h",
 "ag_widget.h","ag_colorbutton.h","ag_glwidget.h","ag_xml.h","ag_layout.h","ag_dialog.h","ag_mutex.h",
 "ag_application.h","ag_background.h","ag_border.h","ag_button.h","ag_text.h","ag_caption.h","ag_checkbox.h","ag_combo.h","ag_edit.h","ag_fontengine.h","ag_fs.h","ag_painttarget.h","ag_surface.h","ag_texture.h","ag_surfacemanager.h","ag_image.h","ag_layoutfactory.h","ag_listbox.h","ag_list.h","ag_main.h","ag_menu.h","ag_menuitem.h","ag_mixer.h","ag_mutex.h","ag_painter.h","ag_png.h","ag_radio.h","ag_screen.h","ag_table.h","ag_texturecache.h","ag_theme.h","ag_tools.h","ag_window.h","ag_xml.h"]
 

PWD=Dir.pwd

task :default => ["libantargis.so"]

$GUISRC="gui/src"
if $ccache!=""
	$ccache+=" "
end
$CXX=$ccache+"g++"
$CC=$ccache+"gcc"
if not windows
	$CFLAGS+=`sdl-config --cflags`.chomp
	$LDFLAGS+=`sdl-config --libs`.chomp+" "+$libs
	$CFLAGS+=" -fPIC"
else
	$CFLAGS="-Ic:/msys/local/include/SDL -Ic:/msys/local/include -Dmain=SDL_main"
	$LDFLAGS="-s -Wl,--enable-auto-import,--export-all "
	$LDFLAGS+=" -Lc:/msys/local/lib -lmingw32 -lSDLmain -lSDL -mwindows "+$libs
	
end

if $debug
	$CFLAGS+=" -Isrc -I"+$GUISRC+" -DUSE_RUBY -g -O0 -I"+Config::CONFIG['archdir']+" -Wall"
else
	$CFLAGS+=" -Isrc -I"+$GUISRC+" -DUSE_RUBY -O2 -I"+Config::CONFIG['archdir']+" -Wall"
end
$LDSHARED="#{$CXX} -shared"
$INSTALL_PROG=$INSTALL+" -m 755 -D "
$INSTALL_DATA=$INSTALL+" -m 644 -D "

interfaceHeaders = interfaceHeadersGUI.collect{|x|"../"+$GUISRC+"/"+x} + interfaceHeadersSRC

SRCS=(Dir[$GUISRC+"/*.cc"]+Dir[$GUISRC+"/*.c"]+(Dir["src/*.cc"]-["src/swig.cc"])+["src/swig.cc"]).uniq-[$GUISRC+"/swig.cc"]
OBJS=[]
O2S={}
SRCS.each{|s|
	o=s.gsub(".cc",".o").gsub(".c",".o")
	OBJS<<o
	O2S[o]=s
}

file "libantargis.so" => OBJS do |t|
	sh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{OBJS.join(" ")} "+$libs
end

# manage dependencies
SRCS.each{|s|
	dep=".deps/"+s.gsub(/.*\//,"")
	if File.exists?(dep)
		deps=File.open(dep).read.gsub('\\','').gsub(/.*:/,"").split(" ")
	else
		deps=[s]
	end
	if windows
		deps=deps.select{|x|(not x=~/glgl/)}
	end
	if s=~/.cc/
		o=s.gsub(".cc",".o")
		file [o] => deps do |f|
                        sh "#{$CXX} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	else
		o=s.gsub(".c",".o")
		file [o] => deps do |f|
			sh "#{$CC} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	end
}

myInterfaces=interfaceHeaders.collect{|x|"src/"+x}+["src/interface.i"]

if $swig!=""
	file ["src/swig.cc"] => ["src/nantmarker.hh"]+myInterfaces do |t|
		sh "cd src; swig -v -Wall -ruby -c++ -I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o swig.cc interface.i 2>&1"
	end
	
	file ["src/nantmarker.hh"] => myInterfaces do |t|
		sh "cd src; ../#{$GUISRC}/createmarker.rb "+interfaceHeaders.join(" ")
	end
end
task :test => "libantargis.so" do |t|
	`ruby ruby/runtests.rb`
	#require 'libantargis.so'
end

task :clean do
	sh "rm -f clean.rb"
	["src",$GUISRC].each{|dir|
		["*.o","*.oo"].each{|ext|
			sh "rm -f #{dir}/#{ext}"
		}
	}
	if $swig!=""
		sh "rm -f src/swig.*"
		sh "rm -f src/nantmarker.hh"
	end
	sh "rm -f config.rb"
	sh "rm -r -f .deps"
	sh "rm -r -f docs/api"
end

def mkdir(d)
	begin
		#puts "mkdir:#{d}"
		Dir.mkdir(d) #sh "test -e #{d} || mkdir #{d}"
	rescue
		#puts "failed"
	end
end
def cpdir(dir,distdir)
	mkdir(distdir+"/"+dir)
	Dir[dir+"/*"].each{|f|
		if (f=~/~/ or f=~/\.o/ or f=~/\.bak/ or f=~/\.xcf/ or f=~/\.tar\.gz/ or f=~/antargis-.*/ or f=~/\.iss/ or f=~/vlog\.txt/) and not f=~/.ogg/
		elsif f=~/\.so/ and not windows
		elsif f=~/Antargis.*package/ or f=~/autopackage/
		elsif File.ftype(f)=="file"
			File.cp(f,"#{distdir}/#{f}")
		end
	}
end

task :install => "libantargis.so" do
	begin
		#puts "PROBLEM: This is not supported ATM"
		#sh $INSTALL_PROG+" libantargis.so "+File.join(Config::CONFIG['sitearchdir'],"libantargis.so")
		destdir=getDestDir
		bindir=destdir+"/bin"
		sharedir=destdir+"/share/antargis"
		#copy everything to sharedir

		md=""
		destdir.split("/").each{|d|
			md+="/"+d
			begin
				#puts "try #{md}"
				Dir.mkdir(md)
			rescue
				#puts "muh"
			end
		}

		mkdir(bindir)
		mkdir(destdir+"/share")
		mkdir(sharedir)
		
		dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
		dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
		dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/)}
	
		dirs.each{|dir|
			cpdir(dir,sharedir)
		}
		# cp base dir
		cpdir(".",sharedir)

		File.cp("libantargis.so",sharedir+"/libantargis.so")
		f=File.open(bindir+"/antargis","w")
		f.puts('#!/bin/sh
		if test "`echo "$0"|sed -e "s/\/.*//"`" == "" ; then
			d=`dirname $0`
		else
			d=`dirname $(pwd)/$0`
		fi
		p=$(dirname $d)
		s=$(echo "$p/share/antargis")
		c=$(pwd)
		cd $s
		/usr/bin/env ruby run.rb
		cd $c
')
		f.close
		`chmod 755 #{bindir}/antargis`

	rescue
		puts "-----------------------------------------"
		puts "PROBLEM: maybe you have to get root ?"
		puts "-----------------------------------------"
		raise
	end
end


task :dist => :test do
	distdir="antargis-#{version}"
	sh "rm -rf #{distdir}"
	mkdir(distdir)
	#sh "test -e #{distdir} || mkdir #{distdir}"
	dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
	dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
	dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/)}

	dirs.each{|dir|
		cpdir(dir,distdir)
	}
	# cp base dir
	cpdir(".",distdir)

	if false
		# FIXME: check if png is transparent first
		puts "CONVERTING PNGs to JPGs"
		# make jpgs
		pngs=`find #{distdir} -name "*.png"`
		pngs.split("\n").each{|p|
			n=p.gsub("png","jpg")
			x=`convert #{p} #{n} && rm #{p}`
		}
	end


	# tar.gz
	if not windows
		sh "rm -rf #{distdir}/config.rb"
		sh "tar cfz #{distdir}.tar.gz #{distdir}"
		sh "rm -rf #{distdir}"
	end
	
end

task :doc do
	puts "running doxygen"
	`doxygen Doxyfile`
end

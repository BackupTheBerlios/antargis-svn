#!/usr/bin/env ruby

require 'rake'
require 'mkmf'
require 'ftools'

require 'buildtools.rb'

if not $xcompile
	$LDFLAGS+=" -L/usr/X11R6/lib "
	$CFLAGS+=" -I/usr/X11R6/include "
else
	$CFLAGS+=" "
end

$CFLAGS+=$incs

version="0.2"

$profile=true

def getDestDir
	d="/usr"
	ARGV.each{|l|
		if l=~/DESTDIR=/
			d=l.sub("DESTDIR=","")
		end
	}
	puts "DestDir:"+d
	return d
end



interfaceHeadersSRC=["ant_frustum.h","ant_projection.h","ant_camera.h",
"scenenode.h","anim_mesh.h","anim_mesh_data.h","ant_app.h","entity.h","entptr.h","glsl.h","height_map.h","map.h","mesh_data.h","mesh.h","mesh_optimizer.h","minimap.h","new_decal.h","ant_renderer.h","resource.h","scene_base.h","scene.h","smoke.h","terrain.h","vertex_array.h","water.h","path.h","impostor.h"]
interfaceHeadersGUI=[
"ag_rubyobj.h","ag_messageobject.h","ag_serial.h","ag_aes.h","ag_singleton.h",
 "ag_geometry.h","ag_font.h","ag_color.h","ag_local.h","ag_config.h","ag_string.h","ag_string_utf8.h",
 "ag_widget.h","ag_colorbutton.h","ag_glwidget.h","ag_xml.h","ag_layout.h","ag_dialog.h","ag_mutex.h",
 "ag_application.h","ag_background.h","ag_border.h","ag_button.h","ag_text.h","ag_caption.h","ag_checkbox.h","ag_combo.h","ag_edit.h","ag_fontengine.h","ag_fs.h","ag_painttarget.h","ag_surface.h","ag_texture.h","ag_surfacemanager.h","ag_image.h","ag_layoutfactory.h","ag_listbox.h","ag_list.h","ag_main.h","ag_menu.h","ag_menuitem.h","ag_mixer.h","ag_mutex.h","ag_painter.h","ag_png.h","ag_radio.h","ag_screen.h","ag_glscreen.h","ag_table.h","ag_texturecache.h","ag_theme.h","ag_tools.h","ag_window.h","ag_xml.h","ag_screenwidget.h","ag_scroller.h","ag_plugin.h","ag_destructor.h","ag_rand.h"]

interfaceHeadersSRC.collect!{|s|"src/"+s}
interfaceHeadersGUI.collect!{|s|"gui/src/"+s}


PWD=Dir.pwd

task :default => ["libantargis.so"]

$GUISRC="gui/src"

$INCLUDEDIRS=""
if $xcompile
	$CFLAGS+=`./contrib/usr/bin/sdl-config --cflags`.chomp
	$INCLUDEDIRS+=`./contrib/usr/bin/sdl-config --cflags`.chomp
	$LDFLAGS+=`./contrib/usr/bin/sdl-config --libs`.chomp+" "+$libs
elsif not windows
	# standard way (unix)
	$CFLAGS+=`sdl-config --cflags`.chomp
	$INCLUDEDIRS+=`sdl-config --cflags`.chomp
	$LDFLAGS+=`sdl-config --libs`.chomp+" "+$libs
	$CFLAGS+=" -fPIC"
end

if $drmuser and $drmmd5
  $CFLAGS+=" -DDRMUSER='\"#{$drmuser}\"' -DDRMMD5='\"#{$drmmd5}\"'"
end

if $xcompile
	rubyincludedir="contrib/usr/lib/ruby/1.8/i386-mingw32msvc/ -Icontrib/usr/include"
else
	rubyincludedir=Config::CONFIG['archdir']
end

$CFLAGS+=" -Isrc -I"+$GUISRC+" -I#{$GUISRC}/mtwist -DUSE_RUBY -I"+rubyincludedir+" -Wall"

if $debug
	$CFLAGS+=" -g -O0"
else
	$CFLAGS+=" -DMNDEBUG -O2"
end
if $profile
	$CFLAGS+=" -DMPROFILE"
end
if $gcdebug
	$CFLAGS+=" -DGCDEBUG"
end

$LDSHARED="#{$CXX} -shared"
$INSTALL_PROG=$INSTALL+" -m 755 -D "
$INSTALL_DATA=$INSTALL+" -m 644 -D "

interfaceHeaders = interfaceHeadersGUI + interfaceHeadersSRC

SRCS=(Dir[$GUISRC+"/*.cc"]+Dir[$GUISRC+"/*.c"]+Dir["src/*.cc"]+["src/swig.cc","gui/src/guiswig.cc","gui/src/mtwist/mtwist.c"]).uniq
if $internalSGE
	SRCS+=Dir[$GUISRC+"/sge/*.cc"]
end
OBJS=[]
O2S={}
SRCS.each{|s|
	o=s.gsub(".cc",".o").gsub(".c",".o")
	OBJS<<o
	O2S[o]=s
}

ANT_OBJS=OBJS-["gui/src/guiswig.o"]

GUI_OBJS=OBJS.select{|o|o=~/gui/}

file "libantargis.so" => ANT_OBJS do |t|
	if $xcompile
		msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} --output-def=libantargis.def -Wl,--enable-auto-image-base -Xlinker --out-implib -Xlinker libantargis.dll.a #{ANT_OBJS.join(" ")} "+$libs
	else
		msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{ANT_OBJS.join(" ")} "+$libs
	end
end

file "libantargisgui.so" => GUI_OBJS do |t|
	msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{GUI_OBJS.join(" ")} "+$libs
end

file "libantargisgui.a" => GUI_OBJS do |t|
	msh "#{$AR} cru #{t.name} #{GUI_OBJS.join(" ")} "
	msh "#{$RANLIB} #{t.name}"
end
file "libantargis.a" => ANT_OBJS do |t|
	msh "#{$AR} cru #{t.name} #{ANT_OBJS.join(" ")} "
	msh "#{$RANLIB} #{t.name}"
end

############################################################################################
# build plugins
############################################################################################

plugins=Dir["gui/src/plugins/*.cc"]
plugins=plugins.select{|f|File.open(f).read=~/DEFINE_PLUGIN/}
plugindeps={}
plugins.each{|f|plugindeps[f]="lib"+f.gsub(/.*\//,"").gsub(".cc","").gsub("_","")+".so"}
#puts plugins.join("\n")
#puts plugindeps
#exit

plugindeps.each{|k,v|
	file v => [k.gsub(".cc",".o"),"libantargis.so"] do |t|
		if $xcompile
			#msh "#{$LDSHARED}  -lstdc++ #{$LDFLAGS} -o #{t.name} #{t.prerequisites} "+$libs+""
			x=t.prerequisites.select{|o|(not o=~/libant/)}
			msh "#{$LDSHARED} #{$LDFLAGS} -lantargis -L. -o #{t.name} #{x.join(" ")} -lantargis "+$libs+" -lstdc++"
		else
			msh "#{$LDSHARED} #{$LDFLAGS} -o #{t.name} #{t.prerequisites} "+$libs
		end
	end
}

PLUGINSSRCS=Dir["gui/src/plugins/*.cc"]

addCleaner(plugindeps.values)
task "plugins" => plugindeps.values do
end

############################################################################################
#
# manage dependencies and compile cc-files
#
############################################################################################

if $swig!=""
	myInterfaces=interfaceHeaders+["src/interface.i","src/AGString.i"]
	file ["src/swig.cc"] => ["src/nantmarker.hh"]+myInterfaces do |t|
		msh "cd src; swig -v -Wall -ruby -c++ -DAGEXPORT #{$INCLUDEDIRS}-I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o swig.cc interface.i 2>&1"
	end
	
	file ["src/nantmarker.hh"] => myInterfaces do |t|
		msh "cd src; ../#{$GUISRC}/createmarker.rb "+interfaceHeaders.collect{|h|"../"+h}.join(" ")
	end

	# libantargisgui
	myInterfaces=interfaceHeadersGUI+["gui/src/interface.i"]
	file ["gui/src/guiswig.cc"] => ["gui/src/nantmarker.hh"]+myInterfaces do |t|
		msh "cd gui/src; swig -v -Wall -ruby -c++ -DAGEXPORT #{$INCLUDEDIRS}-I/usr/lib/ruby/1.8/i486-linux -I/usr/include/SDL -o guiswig.cc interface.i 2>&1"
	end
	
	file ["gui/src/nantmarker.hh"] => myInterfaces do |t|
		msh "cd gui/src; ./createmarker.rb "+interfaceHeadersGUI.collect{|h|"../../"+h}.join(" ")
	end
end


(SRCS+PLUGINSSRCS).each{|s|
	dep=".deps/"+s.gsub(/.*\//,"")
	if File.exists?(dep)
		deps=File.open(dep).read.gsub('\\','').gsub(/.*:/,"").split(" ").collect{|d|d.gsub(PWD+"/","")}
	else
		deps=[s]
	end
	if windows
		deps=deps.select{|x|(not x=~/glgl/)}
	end
	if s=~/.cc/
		o=s.gsub(".cc",".o")
		if s=~/plugins/
			add="-DAGIMPORT"
		else
			add="-DAGEXPORT"
		end
		file [o] => deps do |f|
			msh "#{$CXX} #{$CFLAGS} #{add} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	else
		o=s.gsub(".c",".o")
		file [o] => deps do |f|
			msh "#{$CC} #{$CFLAGS} -Wp,-MD,#{dep} -c #{PWD}/#{s} -o #{o} "
		end
	end
}

task :test => "libantargis.so" do |t|
	if (not $xcompile)
		msh "ruby ruby/runtests.rb"
	end
	#require 'libantargis.so'
end

task :clean do
	msh "rm -rf clean.rb"
	["src",$GUISRC,"gui/src/plugins","gui/src/sge","gui/src/mtwist"].each{|dir|
		["*.o","*.oo"].each{|ext|
			msh "rm -rf #{dir}/#{ext}"
		}
	}
	if $swig!=""
		msh "rm -rf src/swig.* gui/src/guiswig.* gui/src/swig.*"
		msh "rm -rf src/nantmarker.hh"
		msh "rm -rf gui/src/nantmarker.hh"
	end
	msh "rm -rf .deps"
	msh "rm -rf docs/api"
	msh "rm -rf docs/ruby"
	msh "rm -rf libantargis.so"
	msh "rm -rf libantargis.dll.a"
	msh "rm -rf libantargisgui.so libantargisgui.a"

	$files2clean.each{|f|
		msh "rm -rf "+f
	}

end

task :smallclean do
	if $swig!=""
		msh "rm -rf src/swig.*"
		msh "rm -rf src/nantmarker.hh"
	end
end

task :allclean => [:clean] do
	rm_rf "config.rb"
end

def mkdir(d)
	begin
		#puts "mkdir:#{d}"
		Dir.mkdir(d) #sh "test -e #{d} || mkdir #{d}"
	rescue
		#puts "failed"
	end
end
def cpdir(dir,distdir)
	mkdir(distdir+"/"+dir)
	Dir[dir+"/*"].each{|f|
		if (f=~/~/ or f=~/\.o$/ or f=~/\.a$/ or f=~/\.bak/ or f=~/\.xcf/ or f=~/\.svg/ or f=~/\.tar\.gz/ or f=~/antargis-.*/ or f=~/\.iss/ or f=~/vlog\.txt/) and not f=~/\.ogg/
		elsif f=~/\.so/ and not windows
		elsif f=~/Antargis.*package/ or f=~/autopackage/
		elsif File.ftype(f)=="file"
			File.cp(f,"#{distdir}/#{f}")
		end
	}
end

task :install => "libantargis.so" do
	begin
		destdir=getDestDir
		bindir=destdir+"/bin"
		sharedir=destdir+"/share/antargis"
		#copy everything to sharedir

		md=""
		destdir.split("/").each{|d|
			md+="/"+d
			begin
				#puts "try #{md}"
				Dir.mkdir(md)
			rescue
				#puts "muh"
			end
		}

		mkdir(bindir)
		mkdir(destdir+"/share")
		mkdir(sharedir)
		
		dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
		dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
		dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/)}
	
		dirs.each{|dir|
			cpdir(dir,sharedir)
		}
		# cp base dir
		cpdir(".",sharedir)

		File.cp("libantargis.so",sharedir+"/libantargis.so")
		f=File.open(bindir+"/antargis","w")
		f.puts('#!/bin/sh
		if test "`echo "$0"|sed -e "s/\/.*//"`" == "" ; then
			d=`dirname $0`
		else
			d=`dirname $(pwd)/$0`
		fi
		p=$(dirname $d)
		s=$(echo "$p/share/antargis")
		c=$(pwd)
		cd $s
		/usr/bin/env ruby run.rb
		cd $c
')
		f.close
		`chmod 755 #{bindir}/antargis`

	rescue
		puts "-----------------------------------------"
		puts "PROBLEM: maybe you have to get root ?"
		puts "-----------------------------------------"
		raise
	end
end


task :dist => :test do
	distdir="antargis-#{version}"
	msh "rm -rf #{distdir}"
	mkdir(distdir)
	dirs=`find -type d`.split("\n").collect{|x|x.sub("./","")}
	dirs=dirs.select{|x|(not x=~/\.svn/)}.select{|x|(not x=~/\./)}
	dirs=dirs.select{|x|x!="Output" && x!="screenies" && (not x=~/^models/) && (not x=~/contrib/) && x!="autopackage"}

	dirs.each{|dir|
		cpdir(dir,distdir)
	}
	# cp base dir
	cpdir(".",distdir)

	if $xcompile
		# copy dlls
		Dir["contrib/usr/bin/*.dll"].each{|f|
			msh "cp #{f} #{distdir}"
		}
		msh "cp libantargis.so #{distdir}"
		msh "rm -rf #{distdir}/autopackage #{distdir}/contrib #{distdir}/mkmf.log"
	
		# FIXME: maybe del this
		msh "cp #{distdir}/libpng13.dll #{distdir}/libpng12.dll"
		msh "cp #{distdir}/libtiff3.dll #{distdir}/tiff.dll"
	end
	

	# tar.gz
	if $xcompile
		msh "zip -r #{distdir}.zip #{distdir}"
	elsif not windows
		msh "rm -rf #{distdir}/config.rb"
		msh "tar cfz #{distdir}.tar.gz #{distdir}"
		msh "rm -rf #{distdir}"
	end

end

task :doc do
	puts "running doxygen"
	`doxygen Doxyfile`
	rubies=`find -name "*.rb"`.split("\n").select{|f|not (f=~/(contrib|skat|test)/)}.join(" ")
	readmes=`find -name "README"`.split("\n").select{|f|not (f=~/(contrib|skat|test)/)}.join(" ")
	headers=`find -name "*.h"`.split("\n").select{|f|not (f=~/(contrib|skat|test)/)}.join(" ")
	#puts rubies
	#exit
	`rdoc -m README --op docs/ruby #{rubies} #{readmes}` # --exclude "(\\.cc|\\.c|skat|test\/|contrib)"`
end

.TH "Widgets" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Widgets \- contains all the widgets  

.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAGButton\fP"
.br
.RI "\fIimplements push-buttons
.PP
\fBAGButton\fP represents a button, which can hold a text-caption or an image-caption, but not both. Further it can have following states: \fP"
.ti -1c
.RI "class \fBAGWidget\fP"
.br
.RI "\fIbase class for all widgets \fP"
.in -1c
.SH "Detailed Description"
.PP 
contains all the widgets 
.PP
Everything that has a display on screen is called a widget. There are plenty of different widget-types and you are free to define new ones.
.PP
An \fBAGApplication\fP object has one single main-widget, that you can define. All other widgets are children (or grandchildren ...) of this main-widget.
.PP
A simple example how to use nested widgets is: 
.PP
.nf

    \fBAGWidget\fP *parent,*w;
    \fBAGApplication\fP app;
.fi
.PP
.PP
.PP
.nf
    parent=new \fBAGWidget\fP(0,AGRect2(0,0,640,480));
    w=new \fBAGWidget\fP(parent,AGRect2(0,0,100,100));
    parent->addChild(w);
    app.setMainWidget(parent);
    
.fi
.PP
.PP
Nearly all of the widget-types are created this way. Adding a widget to another will automate the drawing and event-processing. 

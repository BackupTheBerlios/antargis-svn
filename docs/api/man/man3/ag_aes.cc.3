.TH "gui/src/ag_aes.cc" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gui/src/ag_aes.cc \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'ag_aes.h'\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <vector>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBAES_SMALL_TABLES\fP"
.br
.ti -1c
.RI "#define \fBRCON\fP(i)   (\fBrcons\fP[(i)] << 24)"
.br
.ti -1c
.RI "#define \fBTE0\fP(i)   \fBTe0\fP[((i) >> 24) & 0xff]"
.br
.ti -1c
.RI "#define \fBTE1\fP(i)   rotr(\fBTe0\fP[((i) >> 16) & 0xff], 8)"
.br
.ti -1c
.RI "#define \fBTE2\fP(i)   rotr(\fBTe0\fP[((i) >> 8) & 0xff], 16)"
.br
.ti -1c
.RI "#define \fBTE3\fP(i)   rotr(\fBTe0\fP[(i) & 0xff], 24)"
.br
.ti -1c
.RI "#define \fBTE41\fP(i)   ((\fBTe0\fP[((i) >> 24) & 0xff] << 8) & 0xff000000)"
.br
.ti -1c
.RI "#define \fBTE42\fP(i)   (\fBTe0\fP[((i) >> 16) & 0xff] & 0x00ff0000)"
.br
.ti -1c
.RI "#define \fBTE43\fP(i)   (\fBTe0\fP[((i) >> 8) & 0xff] & 0x0000ff00)"
.br
.ti -1c
.RI "#define \fBTE44\fP(i)   ((\fBTe0\fP[(i) & 0xff] >> 8) & 0x000000ff)"
.br
.ti -1c
.RI "#define \fBTE421\fP(i)   ((\fBTe0\fP[((i) >> 16) & 0xff] << 8) & 0xff000000)"
.br
.ti -1c
.RI "#define \fBTE432\fP(i)   (\fBTe0\fP[((i) >> 8) & 0xff] & 0x00ff0000)"
.br
.ti -1c
.RI "#define \fBTE443\fP(i)   (\fBTe0\fP[(i) & 0xff] & 0x0000ff00)"
.br
.ti -1c
.RI "#define \fBTE414\fP(i)   ((\fBTe0\fP[((i) >> 24) & 0xff] >> 8) & 0x000000ff)"
.br
.ti -1c
.RI "#define \fBTE4\fP(i)   ((\fBTe0\fP[(i)] >> 8) & 0x000000ff)"
.br
.ti -1c
.RI "#define \fBTD0\fP(i)   \fBTd0\fP[((i) >> 24) & 0xff]"
.br
.ti -1c
.RI "#define \fBTD1\fP(i)   rotr(\fBTd0\fP[((i) >> 16) & 0xff], 8)"
.br
.ti -1c
.RI "#define \fBTD2\fP(i)   rotr(\fBTd0\fP[((i) >> 8) & 0xff], 16)"
.br
.ti -1c
.RI "#define \fBTD3\fP(i)   rotr(\fBTd0\fP[(i) & 0xff], 24)"
.br
.ti -1c
.RI "#define \fBTD41\fP(i)   (\fBTd4s\fP[((i) >> 24) & 0xff] << 24)"
.br
.ti -1c
.RI "#define \fBTD42\fP(i)   (\fBTd4s\fP[((i) >> 16) & 0xff] << 16)"
.br
.ti -1c
.RI "#define \fBTD43\fP(i)   (\fBTd4s\fP[((i) >> 8) & 0xff] << 8)"
.br
.ti -1c
.RI "#define \fBTD44\fP(i)   (\fBTd4s\fP[(i) & 0xff])"
.br
.ti -1c
.RI "#define \fBTD0_\fP(i)   \fBTd0\fP[(i) & 0xff]"
.br
.ti -1c
.RI "#define \fBTD1_\fP(i)   rotr(\fBTd0\fP[(i) & 0xff], 8)"
.br
.ti -1c
.RI "#define \fBTD2_\fP(i)   rotr(\fBTd0\fP[(i) & 0xff], 16)"
.br
.ti -1c
.RI "#define \fBTD3_\fP(i)   rotr(\fBTd0\fP[(i) & 0xff], 24)"
.br
.ti -1c
.RI "#define \fBSWAP\fP(x)   (_lrotl(x, 8) & 0x00ff00ff | _lrotr(x, 8) & 0xff00ff00)"
.br
.ti -1c
.RI "#define \fBGETU32\fP(pt)"
.br
.ti -1c
.RI "#define \fBPUTU32\fP(ct, st)"
.br
.ti -1c
.RI "#define \fBROUND\fP(i, d, s)"
.br
.ti -1c
.RI "#define \fBROUND\fP(i, d, s)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned long \fBu32\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBu8\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBu32\fP \fBrotr\fP (\fBu32\fP val, int bits)"
.br
.ti -1c
.RI "void \fBrijndaelKeySetupEnc\fP (\fBu32\fP rk[], const \fBu8\fP cipherKey[])"
.br
.ti -1c
.RI "void \fBrijndaelKeySetupDec\fP (\fBu32\fP rk[], const \fBu8\fP cipherKey[])"
.br
.ti -1c
.RI "void \fBrijndaelEncrypt\fP (const \fBu32\fP rk[], const \fBu8\fP pt[16], \fBu8\fP ct[16])"
.br
.ti -1c
.RI "void \fBrijndaelDecrypt\fP (const \fBu32\fP rk[], const \fBu8\fP ct[16], \fBu8\fP pt[16])"
.br
.ti -1c
.RI "void * \fBaes_encrypt_init\fP (const \fBu8\fP *key, size_t len)"
.br
.ti -1c
.RI "void \fBaes_encrypt\fP (void *ctx, const \fBu8\fP *plain, \fBu8\fP *crypt)"
.br
.ti -1c
.RI "void \fBaes_encrypt_deinit\fP (void *ctx)"
.br
.ti -1c
.RI "void * \fBaes_decrypt_init\fP (const \fBu8\fP *key, size_t len)"
.br
.ti -1c
.RI "void \fBaes_decrypt\fP (void *ctx, const \fBu8\fP *crypt, \fBu8\fP *plain)"
.br
.ti -1c
.RI "void \fBaes_decrypt_deinit\fP (void *ctx)"
.br
.ti -1c
.RI "std::string \fBencode\fP (size_t i)"
.br
.ti -1c
.RI "size_t \fBdecode\fP (const std::string &s)"
.br
.ti -1c
.RI "std::string \fBcheckKey\fP (std::string k)"
.br
.ti -1c
.RI "std::string \fBaes_enc\fP (const std::string &pkey, const std::string &c)"
.br
.ti -1c
.RI "std::string \fBaes_dec\fP (const std::string &pkey, const std::string &c)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fBu32\fP \fBTe0\fP [256]"
.br
.ti -1c
.RI "static const \fBu32\fP \fBTd0\fP [256]"
.br
.ti -1c
.RI "static const \fBu8\fP \fBTd4s\fP [256]"
.br
.ti -1c
.RI "static const \fBu8\fP \fBrcons\fP []"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define AES_SMALL_TABLES"
.PP
.SS "#define GETU32(pt)"
.PP
\fBValue:\fP
.PP
.nf
(((u32)(pt)[0] << 24) ^ ((u32)(pt)[1] << 16) ^ \
((u32)(pt)[2] <<  8) ^ ((u32)(pt)[3]))
.fi
.SS "#define PUTU32(ct, st)"
.PP
\fBValue:\fP
.PP
.nf
{ \
(ct)[0] = (u8)((st) >> 24); (ct)[1] = (u8)((st) >> 16); \
(ct)[2] = (u8)((st) >>  8); (ct)[3] = (u8)(st); }
.fi
.SS "#define RCON(i)   (\fBrcons\fP[(i)] << 24)"
.PP
.SS "#define ROUND(i, d, s)"
.PP
\fBValue:\fP
.PP
.nf
d##0 = TD0(s##0) ^ TD1(s##3) ^ TD2(s##2) ^ TD3(s##1) ^ rk[4 * i]; \
d##1 = TD0(s##1) ^ TD1(s##0) ^ TD2(s##3) ^ TD3(s##2) ^ rk[4 * i + 1]; \
d##2 = TD0(s##2) ^ TD1(s##1) ^ TD2(s##0) ^ TD3(s##3) ^ rk[4 * i + 2]; \
d##3 = TD0(s##3) ^ TD1(s##2) ^ TD2(s##1) ^ TD3(s##0) ^ rk[4 * i + 3]
.fi
.SS "#define ROUND(i, d, s)"
.PP
\fBValue:\fP
.PP
.nf
d##0 = TE0(s##0) ^ TE1(s##1) ^ TE2(s##2) ^ TE3(s##3) ^ rk[4 * i]; \
d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]
.fi
.SS "#define SWAP(x)   (_lrotl(x, 8) & 0x00ff00ff | _lrotr(x, 8) & 0xff00ff00)"
.PP
.SS "#define TD0(i)   \fBTd0\fP[((i) >> 24) & 0xff]"
.PP
.SS "#define TD0_(i)   \fBTd0\fP[(i) & 0xff]"
.PP
.SS "#define TD1(i)   rotr(\fBTd0\fP[((i) >> 16) & 0xff], 8)"
.PP
.SS "#define TD1_(i)   rotr(\fBTd0\fP[(i) & 0xff], 8)"
.PP
.SS "#define TD2(i)   rotr(\fBTd0\fP[((i) >> 8) & 0xff], 16)"
.PP
.SS "#define TD2_(i)   rotr(\fBTd0\fP[(i) & 0xff], 16)"
.PP
.SS "#define TD3(i)   rotr(\fBTd0\fP[(i) & 0xff], 24)"
.PP
.SS "#define TD3_(i)   rotr(\fBTd0\fP[(i) & 0xff], 24)"
.PP
.SS "#define TD41(i)   (\fBTd4s\fP[((i) >> 24) & 0xff] << 24)"
.PP
.SS "#define TD42(i)   (\fBTd4s\fP[((i) >> 16) & 0xff] << 16)"
.PP
.SS "#define TD43(i)   (\fBTd4s\fP[((i) >> 8) & 0xff] << 8)"
.PP
.SS "#define TD44(i)   (\fBTd4s\fP[(i) & 0xff])"
.PP
.SS "#define TE0(i)   \fBTe0\fP[((i) >> 24) & 0xff]"
.PP
.SS "#define TE1(i)   rotr(\fBTe0\fP[((i) >> 16) & 0xff], 8)"
.PP
.SS "#define TE2(i)   rotr(\fBTe0\fP[((i) >> 8) & 0xff], 16)"
.PP
.SS "#define TE3(i)   rotr(\fBTe0\fP[(i) & 0xff], 24)"
.PP
.SS "#define TE4(i)   ((\fBTe0\fP[(i)] >> 8) & 0x000000ff)"
.PP
.SS "#define TE41(i)   ((\fBTe0\fP[((i) >> 24) & 0xff] << 8) & 0xff000000)"
.PP
.SS "#define TE414(i)   ((\fBTe0\fP[((i) >> 24) & 0xff] >> 8) & 0x000000ff)"
.PP
.SS "#define TE42(i)   (\fBTe0\fP[((i) >> 16) & 0xff] & 0x00ff0000)"
.PP
.SS "#define TE421(i)   ((\fBTe0\fP[((i) >> 16) & 0xff] << 8) & 0xff000000)"
.PP
.SS "#define TE43(i)   (\fBTe0\fP[((i) >> 8) & 0xff] & 0x0000ff00)"
.PP
.SS "#define TE432(i)   (\fBTe0\fP[((i) >> 8) & 0xff] & 0x00ff0000)"
.PP
.SS "#define TE44(i)   ((\fBTe0\fP[(i) & 0xff] >> 8) & 0x000000ff)"
.PP
.SS "#define TE443(i)   (\fBTe0\fP[(i) & 0xff] & 0x0000ff00)"
.PP
.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned long \fBu32\fP"
.PP
.SS "typedef unsigned char \fBu8\fP"
.PP
.SH "Function Documentation"
.PP 
.SS "std::string aes_dec (const std::string & pkey, const std::string & c)"
.PP
.SS "void aes_decrypt (void * ctx, const \fBu8\fP * crypt, \fBu8\fP * plain)"
.PP
.SS "void aes_decrypt_deinit (void * ctx)"
.PP
.SS "void* aes_decrypt_init (const \fBu8\fP * key, size_t len)"
.PP
.SS "std::string aes_enc (const std::string & pkey, const std::string & c)"
.PP
.SS "void aes_encrypt (void * ctx, const \fBu8\fP * plain, \fBu8\fP * crypt)"
.PP
.SS "void aes_encrypt_deinit (void * ctx)"
.PP
.SS "void* aes_encrypt_init (const \fBu8\fP * key, size_t len)"
.PP
.SS "std::string checkKey (std::string k)"
.PP
.SS "size_t decode (const std::string & s)"
.PP
.SS "std::string encode (size_t i)"
.PP
.SS "void rijndaelDecrypt (const \fBu32\fP rk[], const \fBu8\fP ct[16], \fBu8\fP pt[16])"
.PP
.SS "void rijndaelEncrypt (const \fBu32\fP rk[], const \fBu8\fP pt[16], \fBu8\fP ct[16])"
.PP
.SS "void rijndaelKeySetupDec (\fBu32\fP rk[], const \fBu8\fP cipherKey[])"
.PP
Expand the cipher key into the decryption key schedule.
.PP
\fBReturns:\fP
.RS 4
the number of rounds for the given cipher key size. 
.RE
.PP

.SS "void rijndaelKeySetupEnc (\fBu32\fP rk[], const \fBu8\fP cipherKey[])"
.PP
Expand the cipher key into the encryption key schedule.
.PP
\fBReturns:\fP
.RS 4
the number of rounds for the given cipher key size. 
.RE
.PP

.SS "static \fBu32\fP rotr (\fBu32\fP val, int bits)\fC [inline, static]\fP"
.PP
.SH "Variable Documentation"
.PP 
.SS "const \fBu8\fP \fBrcons\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
        
}
.fi
.SS "const \fBu32\fP \fBTd0\fP[256]\fC [static]\fP"
.PP
.SS "const \fBu8\fP \fBTd4s\fP[256]\fC [static]\fP"
.PP
.SS "const \fBu32\fP \fBTe0\fP[256]\fC [static]\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Antargis from the source code.

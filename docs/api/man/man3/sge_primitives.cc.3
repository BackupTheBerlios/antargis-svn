.TH "gui/src/sge_primitives.cc" 3 "27 Oct 2006" "Version 0.1.9" "Antargis" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gui/src/sge_primitives.cc \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL.h'\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <stdarg.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include 'sge_primitives.h'\fP
.br
\fC#include 'sge_surface.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSWAP\fP(x, y, temp)   temp=x;x=y;y=temp"
.br
.ti -1c
.RI "#define \fBCLIP_LEFT_EDGE\fP   0x1"
.br
.ti -1c
.RI "#define \fBCLIP_RIGHT_EDGE\fP   0x2"
.br
.ti -1c
.RI "#define \fBCLIP_BOTTOM_EDGE\fP   0x4"
.br
.ti -1c
.RI "#define \fBCLIP_TOP_EDGE\fP   0x8"
.br
.ti -1c
.RI "#define \fBCLIP_INSIDE\fP(a)   (!a)"
.br
.ti -1c
.RI "#define \fBCLIP_REJECT\fP(a, b)   (a&b)"
.br
.ti -1c
.RI "#define \fBCLIP_ACCEPT\fP(a, b)   (!(a|b))"
.br
.ti -1c
.RI "#define \fBAAbits\fP   8"
.br
.ti -1c
.RI "#define \fBAAlevels\fP   256"
.br
.ti -1c
.RI "#define \fBDO_BEZIER\fP(function)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fB_HLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color)"
.br
.ti -1c
.RI "void \fBsge_HLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color)"
.br
.ti -1c
.RI "void \fBsge_HLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fB_HLineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_HLineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_HLineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fB_VLine\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color)"
.br
.ti -1c
.RI "void \fBsge_VLine\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color)"
.br
.ti -1c
.RI "void \fBsge_VLine\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fB_VLineAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_VLineAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_VLineAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_DoLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_DoLine\fP (SDL_Surface *Surface, Sint16 X1, Sint16 Y1, Sint16 X2, Sint16 Y2, Uint8 R, Uint8 G, Uint8 B, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "int \fBclipEncode\fP (Sint16 x, Sint16 y, Sint16 left, Sint16 top, Sint16 right, Sint16 bottom)"
.br
.ti -1c
.RI "int \fBclipLine\fP (SDL_Surface *dst, Sint16 *x1, Sint16 *y1, Sint16 *x2, Sint16 *y2)"
.br
.ti -1c
.RI "void \fB_Line\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_Line\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color)"
.br
.ti -1c
.RI "void \fBsge_Line\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBcallback_alpha_hack\fP (SDL_Surface *surf, Sint16 x, Sint16 y, Uint32 color)"
.br
.ti -1c
.RI "void \fB_LineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_LineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_LineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fB_AALineAlpha\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AALineAlpha\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AALineAlpha\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AALine\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AALine\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b)"
.br
.ti -1c
.RI "void \fBsge_DomcLine\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_mcLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2)"
.br
.ti -1c
.RI "void \fBsge_mcLineAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.br
.ti -1c
.RI "void \fB_AAmcLineAlpha\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AAmcLineAlpha\fP (SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AAmcLine\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2)"
.br
.ti -1c
.RI "void \fBsge_Rect\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_Rect\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_RectAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_RectAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledRect\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_FilledRect\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_FilledRectAlpha\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledRectAlpha\fP (SDL_Surface *Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_DoEllipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_DoEllipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_Ellipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_Ellipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_EllipseAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_EllipseAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledEllipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_FilledEllipse\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_FilledEllipseAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledEllipseAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AAEllipseAlpha\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AAEllipseAlpha\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AAEllipse\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AAEllipse\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_AAFilledEllipse\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AAFilledEllipse\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_DoCircle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_DoCircle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.br
.ti -1c
.RI "void \fBsge_Circle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_Circle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_CircleAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_CircleAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledCircle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_FilledCircle\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_FilledCircleAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_FilledCircleAlpha\fP (SDL_Surface *Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AACircleAlpha\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AACircleAlpha\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AACircle\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AACircle\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_AAFilledCircle\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AAFilledCircle\fP (SDL_Surface *surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_Bezier\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_Bezier\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B)"
.br
.ti -1c
.RI "void \fBsge_BezierAlpha\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_BezierAlpha\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AABezierAlpha\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AABezierAlpha\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.br
.ti -1c
.RI "void \fBsge_AABezier\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)"
.br
.ti -1c
.RI "void \fBsge_AABezier\fP (SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "Uint8 \fB_sge_update\fP"
.br
.ti -1c
.RI "Uint8 \fB_sge_lock\fP"
.br
.ti -1c
.RI "Uint8 \fB_sge_alpha_hack\fP = 0"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define AAbits   8"
.PP
.SS "#define AAlevels   256"
.PP
.SS "#define CLIP_ACCEPT(a, b)   (!(a|b))"
.PP
.SS "#define CLIP_BOTTOM_EDGE   0x4"
.PP
.SS "#define CLIP_INSIDE(a)   (!a)"
.PP
.SS "#define CLIP_LEFT_EDGE   0x1"
.PP
.SS "#define CLIP_REJECT(a, b)   (a&b)"
.PP
.SS "#define CLIP_RIGHT_EDGE   0x2"
.PP
.SS "#define CLIP_TOP_EDGE   0x8"
.PP
.SS "#define DO_BEZIER(function)"
.PP
.SS "#define SWAP(x, y, temp)   temp=x;x=y;y=temp"
.PP
.SH "Function Documentation"
.PP 
.SS "void _AALineAlpha (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.PP
.SS "void _AAmcLineAlpha (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.PP
.SS "void _HLine (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color)"
.PP
Line functions 
.SS "void _HLineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color, Uint8 alpha)"
.PP
.SS "void _Line (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.PP
.SS "void _LineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, Uint8 alpha)"
.PP
.SS "void _VLine (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color)"
.PP
.SS "void _VLineAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color, Uint8 alpha)"
.PP
.SS "void callback_alpha_hack (SDL_Surface * surf, Sint16 x, Sint16 y, Uint32 color)"
.PP
.SS "int clipEncode (Sint16 x, Sint16 y, Sint16 left, Sint16 top, Sint16 right, Sint16 bottom)"
.PP
.SS "int clipLine (SDL_Surface * dst, Sint16 * x1, Sint16 * y1, Sint16 * x2, Sint16 * y2)"
.PP
.SS "void sge_AABezier (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_AABezier (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)"
.PP
.SS "void sge_AABezierAlpha (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_AABezierAlpha (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_AACircle (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_AACircle (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color)"
.PP
.SS "void sge_AACircleAlpha (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_AACircleAlpha (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_AAEllipse (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_AAEllipse (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)"
.PP
.SS "void sge_AAEllipseAlpha (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_AAEllipseAlpha (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_AAFilledCircle (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_AAFilledCircle (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 r, Uint32 color)"
.PP
.SS "void sge_AAFilledEllipse (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_AAFilledEllipse (SDL_Surface * surface, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)"
.PP
.SS "void sge_AALine (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b)"
.PP
.SS "void sge_AALine (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.PP
.SS "void sge_AALineAlpha (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 alpha)"
.PP
.SS "void sge_AALineAlpha (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_AAmcLine (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2)"
.PP
.SS "void sge_AAmcLineAlpha (SDL_Surface * dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.PP
.SS "void sge_Bezier (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_Bezier (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)"
.PP
.SS "void sge_BezierAlpha (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_BezierAlpha (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_Circle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_Circle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)"
.PP
.SS "void sge_CircleAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_CircleAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_DoCircle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DoCircle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DoEllipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DoEllipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DoLine (SDL_Surface * Surface, Sint16 X1, Sint16 Y1, Sint16 X2, Sint16 Y2, Uint8 R, Uint8 G, Uint8 B, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DoLine (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_DomcLine (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, void  Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))"
.PP
.SS "void sge_Ellipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_Ellipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)"
.PP
.SS "void sge_EllipseAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_EllipseAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_FilledCircle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_FilledCircle (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)"
.PP
.SS "void sge_FilledCircleAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_FilledCircleAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_FilledEllipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_FilledEllipse (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)"
.PP
.SS "void sge_FilledEllipseAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_FilledEllipseAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_FilledRect (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_FilledRect (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.PP
.SS "void sge_FilledRectAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_FilledRectAlpha (SDL_Surface * surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_HLine (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_HLine (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color)"
.PP
.SS "void sge_HLineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_HLineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color, Uint8 alpha)"
.PP
.SS "void sge_Line (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_Line (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color)"
.PP
.SS "void sge_LineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_LineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color, Uint8 alpha)"
.PP
.SS "void sge_mcLine (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2)"
.PP
.SS "void sge_mcLineAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r1, Uint8 g1, Uint8 b1, Uint8 r2, Uint8 g2, Uint8 b2, Uint8 alpha)"
.PP
.SS "void sge_Rect (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_Rect (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)"
.PP
Figure functions 
.SS "void sge_RectAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_RectAlpha (SDL_Surface * Surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)"
.PP
.SS "void sge_VLine (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint8 R, Uint8 G, Uint8 B)"
.PP
.SS "void sge_VLine (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color)"
.PP
.SS "void sge_VLineAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint8 R, Uint8 G, Uint8 B, Uint8 alpha)"
.PP
.SS "void sge_VLineAlpha (SDL_Surface * Surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color, Uint8 alpha)"
.PP
.SH "Variable Documentation"
.PP 
.SS "Uint8 \fB_sge_alpha_hack\fP = 0"
.PP
.SS "Uint8 \fB_sge_lock\fP"
.PP
.SS "Uint8 \fB_sge_update\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Antargis from the source code.
